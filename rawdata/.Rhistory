mutate(fixes,
perfect_feedback=ifelse(anticipating_next_fix==1 &
style_score==5 &
satisfied_score==5 &
sum_price_just_right>=5,
1, 0)) %>%
#filter(merch_week < as.Date("2016-12-10")) %>%
group_by(merch_week, perfect_feedback) %>%
summarise(items_sold=mean(items_sold)) %>%
ggplot(aes(x=merch_week, y=items_sold, color=factor(perfect_feedback))) + geom_line(size=1) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) + theme(legend.title = element_blank()) +
facet_grid(perfect_feedback ~ ., scales="free") + scale_x_date(breaks = pretty_breaks(30))
group_by(scores, merch_week) %>%
#filter(merch_week < as.Date("2016-12-10")) %>%
summarise(pred=mean(pred), actual=mean(actual)) %>%
gather("metric", "value", 2:3) %>%
ggplot(aes(x=merch_week, y=value, color=metric)) + geom_line(size=1) +
ylab("KR") + xlab("Merch Week") + theme(legend.title = element_blank()) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
scale_x_date(breaks = pretty_breaks(20)) + ggtitle("Expected versus Actual -- Fix 2+")
mutate(fixes,
perfect_feedback=ifelse(anticipating_next_fix==1 &
style_score==5 &
satisfied_score==5 &
sum_price_just_right>=5,
1, 0)) %>%
#filter(merch_week < as.Date("2016-12-10")) %>%
filter(drop==0) %>%
group_by(merch_week, perfect_feedback) %>%
summarise(items_sold=mean(items_sold)) %>%
ggplot(aes(x=merch_week, y=items_sold, color=factor(perfect_feedback))) + geom_line(size=1) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) + theme(legend.title = element_blank()) +
facet_grid(perfect_feedback ~ ., scales="free") + scale_x_date(breaks = pretty_breaks(30))
mutate(fixes,
feedback=ifelse(anticipating_next_fix==1 &
style_score==5 &
satisfied_score==5 &
sum_price_just_right>=5,
"Perfect", "Other")) %>%
#filter(merch_week < as.Date("2016-12-10")) %>%
filter(drop==0) %>%
group_by(merch_week, perfect_feedback) %>%
summarise(items_sold=mean(items_sold)) %>%
ggplot(aes(x=merch_week, y=items_sold, color=factor(perfect_feedback))) + geom_line(size=1) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) + theme(legend.title = element_blank()) +
facet_grid(perfect_feedback ~ ., scales="free") + scale_x_date(breaks = pretty_breaks(30))
mutate(fixes,
feedback=ifelse(anticipating_next_fix==1 &
style_score==5 &
satisfied_score==5 &
sum_price_just_right>=5,
"Perfect", "Other")) %>%
#filter(merch_week < as.Date("2016-12-10")) %>%
filter(drop==0) %>%
group_by(merch_week, feedback) %>%
summarise(items_sold=mean(items_sold)) %>%
ggplot(aes(x=merch_week, y=items_sold, color=factor(perfect_feedback))) + geom_line(size=1) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) + theme(legend.title = element_blank()) +
facet_grid(feedback ~ ., scales="free") + scale_x_date(breaks = pretty_breaks(30))
mutate(fixes,
feedback=ifelse(anticipating_next_fix==1 &
style_score==5 &
satisfied_score==5 &
sum_price_just_right>=5,
"Perfect", "Other")) %>%
#filter(merch_week < as.Date("2016-12-10")) %>%
filter(drop==0) %>%
group_by(merch_week, feedback) %>%
summarise(items_sold=mean(items_sold)) %>%
ggplot(aes(x=merch_week, y=items_sold, color=factor(feedback))) + geom_line(size=1) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) + theme(legend.title = element_blank()) +
facet_grid(feedback ~ ., scales="free") + scale_x_date(breaks = pretty_breaks(30))
mutate(fixes,
feedback=ifelse(anticipating_next_fix==1 &
style_score==5 &
satisfied_score==5 &
sum_price_just_right>=5,
"Perfect", "Other")) %>%
#filter(merch_week < as.Date("2016-12-10")) %>%
filter(drop==0) %>%
group_by(merch_week, feedback) %>%
summarise(items_sold=mean(items_sold)) %>%
ggplot(aes(x=merch_week, y=items_sold)) + geom_line(size=1) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) + theme(legend.title = element_blank()) +
facet_grid(feedback ~ ., scales="free") + scale_x_date(breaks = pretty_breaks(30))
mutate(fixes,
feedback=ifelse(anticipating_next_fix==1 &
style_score==5 &
satisfied_score==5 &
sum_price_just_right>=5,
"Perfect", "Other")) %>%
#filter(merch_week < as.Date("2016-12-10")) %>%
filter(drop==0) %>%
group_by(merch_week, feedback) %>%
summarise(items_sold=mean(items_sold)) %>%
ggplot(aes(x=merch_week, y=items_sold)) + geom_line(size=1) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) + theme(legend.title = element_blank()) +
facet_grid(feedback ~ ., scales="free") + scale_x_date(breaks = pretty_breaks(30)) +
ylab("KR") + xlab("Merch Week")
mutate(fixes,
feedback=ifelse(anticipating_next_fix==1 &
style_score==5 &
satisfied_score==5 &
sum_price_just_right>4,
"Perfect", "Other")) %>%
#filter(merch_week < as.Date("2016-12-10")) %>%
filter(drop==0) %>%
group_by(merch_week, feedback) %>%
summarise(items_sold=mean(items_sold)) %>%
ggplot(aes(x=merch_week, y=items_sold)) + geom_line(size=1) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) + theme(legend.title = element_blank()) +
facet_grid(feedback ~ ., scales="free") + scale_x_date(breaks = pretty_breaks(30)) +
ylab("KR") + xlab("Merch Week")
mutate(fixes,
feedback=ifelse(anticipating_next_fix==1 &
style_score==5 &
satisfied_score==5 &
sum_price_just_right>3,
"Perfect", "Other")) %>%
#filter(merch_week < as.Date("2016-12-10")) %>%
filter(drop==0) %>%
group_by(merch_week, feedback) %>%
summarise(items_sold=mean(items_sold)) %>%
ggplot(aes(x=merch_week, y=items_sold)) + geom_line(size=1) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) + theme(legend.title = element_blank()) +
facet_grid(feedback ~ ., scales="free") + scale_x_date(breaks = pretty_breaks(30)) +
ylab("KR") + xlab("Merch Week")
t=mutate(fixes,
feedback=ifelse(anticipating_next_fix==1 &
style_score==5 &
satisfied_score==5 &
sum_price_just_right>3,
"Perfect", "Other")) %>%
#filter(merch_week < as.Date("2016-12-10")) %>%
filter(drop==0)
table(t$feedback)
ttt <- filter(fixes, fix_number==1) %>% mutate(Y=items_sold)
f <- as.formula(Y ~  algo_score + exchanged_flag + sf_credit + sf_waived + sf_credit_special +
d_no_ratings + anticipating_next_fix + as.factor(style_score) +
as.factor(satisfied_score) + sum_price_just_right)
mm <- lm(data=ttt, f)
summary(mm)
scores <- data.frame(merch_week=ttt$merch_week,
Actual=ttt$Y,
Expected=mm$fitted.values,
residual=mm$residuals,
month=as.factor(ttt$month_of_fix))
group_by(scores, merch_week) %>%
#filter(merch_week < as.Date("2016-12-10")) %>%
summarise(pred=mean(pred), actual=mean(actual)) %>%
gather("metric", "value", 2:3) %>%
ggplot(aes(x=merch_week, y=value, color=metric)) + geom_line(size=1) +
ylab("KR") + xlab("Merch Week") + theme(legend.title = element_blank()) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
scale_x_date(breaks = pretty_breaks(20)) + ggtitle("Expected versus Actual -- First Fixes")
library(dplyr)
library(tidyr)
library(ggplot2)
library(scales)
tt <- filter(fixes, drop==0) %>% mutate(Y=items_sold)
f <- as.formula(Y ~  items_sold_lf + algo_score + exchanged_flag + kr_lt +
anticipating_next_fix + as.factor(style_score) + d_no_ratings +
as.factor(satisfied_score) + sum_price_just_right)
m <- lm(data=tt, f)
summary(m)
scores <- data.frame(merch_week=tt$merch_week,
calendar_month=tt$calendar_month,
Observed=tt$Y,
Expected=m$fitted.values,
residual=m$residuals,
month=as.factor(tt$month_of_fix))
group_by(scores, merch_week) %>%
#filter(merch_week < as.Date("2016-12-10")) %>%
summarise(Expected=mean(Expected), Observed=mean(Observed)) %>%
gather("metric", "value", 2:3) %>%
ggplot(aes(x=merch_week, y=Observed, color=metric)) + geom_line(size=1) +
ylab("KR") + xlab("Merch Week") + theme(legend.title = element_blank()) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
scale_x_date(breaks = pretty_breaks(20)) + ggtitle("Expected versus Actual -- Fix 2+")
View(scores)
View(scores)
group_by(scores, merch_week) %>%
#filter(merch_week < as.Date("2016-12-10")) %>%
summarise(Expected=mean(Expected), Observed=mean(Observed))
group_by(scores, merch_week) %>%
#filter(merch_week < as.Date("2016-12-10")) %>%
summarise(Expected=mean(Expected), Observed=mean(Observed)) %>%
gather("metric", "value", 2:3) %>%
ggplot(aes(x=merch_week, y=value, color=metric)) + geom_line(size=1) +
ylab("KR") + xlab("Merch Week") + theme(legend.title = element_blank()) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
scale_x_date(breaks = pretty_breaks(20)) + ggtitle("Expected versus Actual -- Fix 2+")
group_by(scores, merch_week) %>%
#filter(merch_week < as.Date("2016-12-10")) %>%
summarise(Expected=mean(Expected), Observed=mean(Observed)) %>%
gather("metric", "value", 2:3) %>%
ggplot(aes(x=merch_week, y=value, color=metric)) + geom_line(size=1) +
ylab("KR") + xlab("Merch Week") + theme(legend.title = element_blank()) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
scale_x_date(breaks = pretty_breaks(20)) + ggtitle("Expected versus Actual (Fixes 2+)")
p <- predict(m, interval = "prediction")
p <- predict(m, interval = "prediction", new=tt)
View(p)
group_by(scores, merch_week) %>%
#filter(merch_week < as.Date("2016-12-10")) %>%
summarise(Expected=mean(Expected), Observed=mean(Observed)) %>%
gather("metric", "value", 2:3) %>%
ggplot(aes(x=merch_week, y=value, color=metric)) + geom_line(size=1) + geom_smooth() +
ylab("KR") + xlab("Merch Week") + theme(legend.title = element_blank()) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
scale_x_date(breaks = pretty_breaks(20)) + ggtitle("Expected versus Actual (Fixes 2+)")
group_by(scores, merch_week) %>%
#filter(merch_week < as.Date("2016-12-10")) %>%
summarise(Expected=mean(Expected), Observed=mean(Observed)) %>%
gather("metric", "value", 2:3) %>%
ggplot(aes(x=merch_week, y=value, color=metric)) + geom_line(size=1) +
ylab("KR") + xlab("Merch Week") + theme(legend.title = element_blank()) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
scale_x_date(breaks = pretty_breaks(20)) + ggtitle("Expected versus Actual (Fixes 2+)")
weekly <- split(filter(fixes, drop==0), fixes$merch_week)
s <- subset(fixes, drop==0)
weekly <- split(s, s$merch_week)
corr <- function(x){
return(corr(x$items_sold, x$algo_score))
}
acccuracy <- data.frame(rbindlist(lapply(weekly, corr)), stringsAsFactors = FALSE)
library(data.table)
corr <- function(x){
return(corr(x$items_sold, x$algo_score))
}
acccuracy <- data.frame(rbindlist(lapply(weekly, corr)), stringsAsFactors = FALSE)
corr(cars$speed, cars$dist)
cor(cars$speed, cars$dist)
corr <- function(x){
return(data.frame(x$merch_week, cor(x$items_sold, x$algo_score)))
}
acccuracy <- data.frame(rbindlist(lapply(weekly, corr)), stringsAsFactors = FALSE)
View(acccuracy)
s <- subset(fixes, drop==0)
weekly <- split(s, s$merch_week)
corr <- function(x){
return(data.frame(unique(x$merch_week), cor(x$items_sold, x$algo_score)))
}
acccuracy <- data.frame(rbindlist(lapply(weekly, corr)), stringsAsFactors = FALSE)
View(acccuracy)
View(acccuracy)
s <- subset(fixes, drop==0)
weekly <- split(s, s$merch_week)
corr <- function(x){
d <- data.frame(unique(x$merch_week), cor(x$items_sold, x$algo_score))
names(d) <- c("merch_week", "correlation")
return(d)
}
data.frame(rbindlist(lapply(weekly, corr)), stringsAsFactors = FALSE) %>%
ggplot(aes(x=merch_week, y=correlation)) + geom_line(size=1)
s <- subset(fixes, drop==0)
weekly <- split(s, s$merch_week)
corr <- function(x){
d <- data.frame(unique(x$merch_week), cor(x$items_sold, x$algo_score))
names(d) <- c("merch_week", "correlation")
return(d)
}
data.frame(rbindlist(lapply(weekly, corr)), stringsAsFactors = FALSE) %>%
ggplot(aes(x=merch_week, y=correlation)) + geom_line(size=1) +
scale_x_date(breaks = pretty_breaks(20)) + ggtitle("Match Score and KR correlation")
data.frame(rbindlist(lapply(weekly, corr)), stringsAsFactors = FALSE) %>%
ggplot(aes(x=merch_week, y=correlation)) + geom_line(size=1) +
scale_x_date(breaks = pretty_breaks(20)) + ggtitle("Match Score and KR correlation") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
data.frame(rbindlist(lapply(weekly, corr)), stringsAsFactors = FALSE) %>%
ggplot(aes(x=merch_week, y=correlation)) + geom_line(size=1) +
scale_x_date(breaks = pretty_breaks(20)) + ggtitle("Match Score and KR correlation") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) + ylab("") + xlab("Merch Week")
s <- subset(fixes, drop==0)
weekly <- split(s, s$merch_week)
corr <- function(x){
d <- data.frame(unique(x$merch_week), cor(x$items_sold, x$algo_score, method="spearman"))
names(d) <- c("merch_week", "correlation")
return(d)
}
data.frame(rbindlist(lapply(weekly, corr)), stringsAsFactors = FALSE) %>%
ggplot(aes(x=merch_week, y=correlation)) + geom_line(size=1) +
scale_x_date(breaks = pretty_breaks(20)) + ggtitle("Weekly Correlation(Match Score, KR)") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) + ylab("") + xlab("Merch Week")
data.frame(rbindlist(lapply(weekly, corr)), stringsAsFactors = FALSE) %>%
ggplot(aes(x=merch_week, y=correlation)) + geom_line(size=1) +
scale_x_date(breaks = pretty_breaks(20)) + ggtitle("Weekly Rank Correlations of Match Scores & KR)") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) + ylab("") + xlab("Merch Week")
data.frame(rbindlist(lapply(weekly, corr)), stringsAsFactors = FALSE) %>%
ggplot(aes(x=merch_week, y=correlation)) + geom_line(size=1) +
scale_x_date(breaks = pretty_breaks(20)) + ggtitle("Weekly Rank Correlations of Match Scores versus KR") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) + ylab("") + xlab("Merch Week")
data.frame(rbindlist(lapply(weekly, corr)), stringsAsFactors = FALSE) %>%
ggplot(aes(x=merch_week, y=correlation)) + geom_line(size=1) +
scale_x_date(breaks = pretty_breaks(20)) + ggtitle("Weekly Rank Correlations of Match Scores versus KR") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) + ylab("") + xlab("Merch Week") +
scale_x_date(breaks = pretty_breaks(30))
data.frame(rbindlist(lapply(weekly, corr)), stringsAsFactors = FALSE) %>%
ggplot(aes(x=merch_week, y=correlation)) + geom_line(size=1) +
scale_x_date(breaks = pretty_breaks(30)) + ggtitle("Weekly Rank Correlations of Match Scores versus KR") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) + ylab("") + xlab("Merch Week")
tt <- filter(fixes, drop==0) %>% mutate(Y=items_sold)
f <- as.formula(Y ~  items_sold_lf +exchanged_flag + kr_lt +
anticipating_next_fix + as.factor(style_score) + d_no_ratings +
as.factor(satisfied_score) + sum_price_just_right)
m <- lm(data=tt, f)
summary(m)
scores <- data.frame(merch_week=tt$merch_week,
calendar_month=tt$calendar_month,
Observed=tt$Y,
Expected=m$fitted.values,
residual=m$residuals,
month=as.factor(tt$month_of_fix))
group_by(scores, merch_week) %>%
#filter(merch_week < as.Date("2016-12-10")) %>%
summarise(Expected=mean(Expected), Observed=mean(Observed)) %>%
gather("metric", "value", 2:3) %>%
ggplot(aes(x=merch_week, y=value, color=metric)) + geom_line(size=1) +
ylab("KR") + xlab("Merch Week") + theme(legend.title = element_blank()) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
scale_x_date(breaks = pretty_breaks(20)) + ggtitle("Expected versus Actual (Fixes 2+)")
f <- as.formula(Y ~  items_sold_lf + algo_score + exchanged_flag + kr_lt +
anticipating_next_fix + as.factor(style_score) + d_no_ratings +
as.factor(satisfied_score) + sum_price_just_right)
m <- lm(data=tt, f)
summary(m)
scores <- data.frame(merch_week=tt$merch_week,
calendar_month=tt$calendar_month,
Observed=tt$Y,
Expected=m$fitted.values,
residual=m$residuals,
month=as.factor(tt$month_of_fix))
group_by(scores, merch_week) %>%
#filter(merch_week < as.Date("2016-12-10")) %>%
summarise(Expected=mean(Expected), Observed=mean(Observed)) %>%
gather("metric", "value", 2:3) %>%
ggplot(aes(x=merch_week, y=value, color=metric)) + geom_line(size=1) +
ylab("KR") + xlab("Merch Week") + theme(legend.title = element_blank()) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
scale_x_date(breaks = pretty_breaks(20)) + ggtitle("Expected versus Actual (Fixes 2+)")
library(xlsx)
library(dplyr)
library(readxl)
library(stringi)
library(tidyr)
library(reshape2)
library(data.table)
library(dplyr)
library(ggmap)
library(parallel)
library(foreach)
library(doParallel)
library(rvest)
library(stringr)
source("/Users/kimlarsen/Documents/Code/NBA_RANKINGS/functions/distance_between.R")
setwd("/Users/kimlarsen/Documents/Code/NBA_RANKINGS/rawdata/")
team_map <- data.frame(read_excel("schedule.xlsx", sheet=2)) %>%
distinct(Team, .keep_all=TRUE) %>% select(City, NBAstuffer.Initials, Team) %>%
filter(!(Team %in% c("Charlotte Bobcats", "New Orleans Hornets")))
### 538 data
ft8 <- read_html("http://projects.fivethirtyeight.com/2017-nba-predictions/")
team <- ft8 %>% html_nodes("tbody tr td.team a") %>% html_text() %>% gsub("[0-9, -]", "", .)
wins <- ft8 %>% html_nodes("tbody tr td.proj-rec") %>% html_text() %>% gsub('-[0-9]+','', .)
losses <- ft8 %>% html_nodes("tbody tr td.proj-rec") %>% html_text() %>% gsub('[0-9]+-','', .)
elo <- ft8 %>% html_nodes("tbody tr td.elo.original") %>% html_text()
carm_elo <- ft8 %>% html_nodes("tbody tr td.carmelo") %>% html_text()
team[team=="ers"] <- "Philadelphia"
team[team=="Hornets"] <- "Charlotte"
team[team=="Clippers"] <- "LA Clippers"
team[team=="Cavaliers"] <- "Cleveland"
team[team=="Warriors"] <- "Golden State"
team[team=="Spurs"] <- "San Antonio"
team[team=="Raptors"] <- "Toronto"
team[team=="Jazz"] <- "Utah"
team[team=="Thunder"] <- "Oklahoma City"
team[team=="TrailBlazers"] <- "Portland"
team[team=="Rockets"] <- "Houston"
team[team=="Pelicans"] <- "New Orleans"
team[team=="Celtics"] <- "Boston"
team[team=="Timberwolves"] <- "Minnesota"
team[team=="Bulls"] <- "Chicago"
team[team=="Hawks"] <- "Atlanta"
team[team=="Pistons"] <- "Detroit"
team[team=="Nuggets"] <- "Denver"
team[team=="Mavericks"] <- "Dallas"
team[team=="Wizards"] <- "Washington"
team[team=="Lakers"] <- "LA Lakers"
team[team=="Kings"] <- "Sacramento"
team[team=="Knicks"] <- "New York"
team[team=="Grizzlies"] <- "Memphis"
team[team=="Pacers"] <- "Indiana"
team[team=="Bucks"] <- "Milwaukee"
team[team=="Magic"] <- "Orlando"
team[team=="Heat"] <- "Miami"
team[team=="Suns"] <- "Phoenix"
team[team=="Nets"] <- "Brooklyn"
fivethirtyeight <- data.frame(team, elo=as.numeric(elo),
carm_elo=as.numeric(carm_elo),
wins_538=as.numeric(wins),
losses_538=as.numeric(losses),
stringsAsFactors = FALSE) %>%
mutate(selected_team=as.character(team), opposing_team=as.character(team),
elo=elo, carm_elo=carm_elo,
pred_win_rate_538=wins_538/(wins_538+losses_538)) %>%
select(-team)
### Injury return dates from CBS
cbs_injuries <- read_html("http://www.cbssports.com/nba/injuries/daily")
PLAYER_FULL_NAME <- cbs_injuries %>% html_nodes("tr.row1 td:nth-child(3), tr.row2 td:nth-child(3)") %>% html_text()
return_notes <- cbs_injuries %>% html_nodes("tr.row1 td:nth-child(6), tr.row2 td:nth-child(6)") %>% html_text()
daily_injuries <- data.frame(PLAYER_FULL_NAME,
return_notes,
stringsAsFactors = FALSE) %>%
mutate(clean_note=gsub("Expected to be out until at least ", "", return_notes))
convert_to_date <- function(data){
if (data$clean_note=="Game Time Decision"){
data$return_date <- Sys.Date() + 1
} else if (data$clean_note=="Out for the season"){
data$return_date <- as.Date("2017-10-25")
} else{
data$return_date <- as.Date(data$clean_note, format="%b %d")
}
if (data$return_date<Sys.Date()){
data$return_date <- data$return_date + 365
}
return(data)
}
daily_injuries <- data.frame(rbindlist(lapply(split(daily_injuries, daily_injuries$PLAYER_FULL_NAME), convert_to_date)), stringsAsFactors = FALSE) %>%
select(PLAYER_FULL_NAME, return_date) %>% distinct(PLAYER_FULL_NAME, .keep_all=TRUE)
### Injury status from ESPN
source_injuries <- read_html("http://espn.go.com/nba/injuries")
players <- source_injuries %>%
html_nodes('table tr.oddrow a, table tr.evenrow a') %>%
html_text()
statuses <- source_injuries %>%
html_nodes('table tr.oddrow td:nth-child(2), table tr.evenrow  td:nth-child(2)') %>%
html_text()
dates <- source_injuries %>%
html_nodes('table tr.oddrow td:nth-child(3), table tr.evenrow  td:nth-child(3)') %>%
html_text()
injuries <- data.frame(
PLAYER_FULL_NAME = players,
injury_status = statuses,
injury_date = dates,
stringsAsFactors = FALSE
) %>% arrange(PLAYER_FULL_NAME, desc(injury_date)) %>%
distinct(PLAYER_FULL_NAME, .keep_all=TRUE) %>%
left_join(daily_injuries, by="PLAYER_FULL_NAME") %>%
distinct(PLAYER_FULL_NAME, .keep_all=TRUE) %>%
mutate(injury_scrape_date=Sys.Date())
injuries[is.na(injuries$return_date),"return_date"] <- Sys.Date()+1
### Get the current rosters
team_pages <- read_html("http://www.espn.com/nba/teams") %>%
html_nodes("ul.medium-logos span a:nth-child(3)") %>% html_attr("href")
rosters <- lapply(team_pages, function (team_link) {
team_link <- paste0('http://www.espn.com', team_link)
team_roster <- read_html(team_link)
team_name <- team_roster %>% html_nodes("h2.logo b") %>% html_text()
team_name[team_name=="LA Clippers"] <- "Los Angeles Clippers"
team_name[team_name=="Portland Trail Blazers"] <- "Portland Trailblazers"
data <- sapply(1:8, function(col) {
team_roster %>% html_nodes(paste0("tr.evenrow > td:nth-child(",col,"), tr.oddrow > td:nth-child(",col,")")) %>% html_text()
})
data <- data.frame(data, stringsAsFactors = FALSE)
colnames(data) <- c('Number','PLAYER_FULL_NAME','Position','Age','Height','Weight','College','Salary')
data$Team <- team_name
data$Age <- as.numeric(data$Age)
data$Weight <- as.numeric(data$Weight)
data$Salary <- as.numeric(gsub(',','',gsub('\\$', '', data$Salary)))
data
})
all_rosters <- bind_rows(lapply(rosters, function(x) as.data.frame(x))) %>%
left_join(team_map, by="Team") %>%
rename(OWN_TEAM=City) %>%
select(PLAYER_FULL_NAME, OWN_TEAM, Position, Age, Height, Weight, Salary, Team) %>%
arrange(PLAYER_FULL_NAME, OWN_TEAM) %>%
left_join(injuries, by="PLAYER_FULL_NAME") %>%
distinct(PLAYER_FULL_NAME, .keep_all=TRUE)
## Save scraped data
write.csv(all_rosters, "rosters_current.csv", row.names = FALSE)
write.csv(all_rosters, paste0("rosters_", Sys.Date(), ".csv"), row.names = FALSE)
write.csv(fivethirtyeight, paste0("FiveThirtyEight_", Sys.Date(), ".csv"), row.names = FALSE)
write.csv(fivethirtyeight, paste0("FiveThirtyEight_current.csv"), row.names = FALSE)
write.csv(injuries, paste0("injuries_", Sys.Date(), ".csv"), row.names = FALSE)
write.csv(injuries, "injuries_current.csv", row.names = FALSE)
library(cranlogs)
sum(cranlogs::cran_downloads(when = "last-month", packages = "Information")$count)
library(cranlogs)
t=cranlogs::cran_downloads(when = "last-month", packages = "Information")
View(t)
View(t)
library(cranlogs)
t <- cranlogs::cran_downloads(when = "last-month", packages = "Information") %>%
ggplot(aes(x=date, y=count)) + geom_line()
cranlogs::cran_downloads(when = "last-month", packages = "Information") %>%
ggplot(aes(x=date, y=count)) + geom_line()
library(cranlogs)
cranlogs::cran_downloads(packages = "Information") %>%
ggplot(aes(x=date, y=count)) + geom_line()
library(cranlogs)
cranlogs::cran_downloads(when = "last-year", packages = "Information") %>%
ggplot(aes(x=date, y=count)) + geom_line()
library(cranlogs)
cranlogs::cran_downloads(count=1000, packages = "Information") %>%
ggplot(aes(x=date, y=count)) + geom_line()
?cran_top_downloads()
?cran_downloads()
library(cranlogs)
cranlogs::cran_downloads(from=as.Date("2015-01-01"), to=as.Date("2016-12-06"),
packages = "Information") %>%
ggplot(aes(x=date, y=count)) + geom_line()
sum(cranlogs::cran_downloads(from=as.Date("2015-01-01"), to=as.Date("2016-12-06"),
packages = "Information")$count)
