ungroup()
sim_share_of_minutes <- function(x){
x$share_of_minutes=min(max(rnorm(1, x$m_share_of_minutes, x$s_share_of_minutes), 0), 1)
return(x)
}
if (runs==0){
dist_active$share_of_minutes <- dist_active$m_share_of_minutes
x <- get_surplus_variables(dist_active, nclus) %>% select(-game_id)
d <- attach_win_perc(thisgame, win_perc1, win_perc2)
samplesdf <- data.frame(cbind(x, d, row.names=NULL), stringsAsFactors = FALSE)
} else if (runs==1){
dist_active_sim <- data.frame(rbindlist(lapply(split(dist_active, dist_active$PLAYER_FULL_NAME), sim_share_of_minutes)))
x <- get_surplus_variables(dist_active_sim, nclus)
d <- attach_win_perc(thisgame, win_perc1, win_perc2)
samplesdf <- inner_join(x, d, by="game_id")
} else{
ncore <- detectCores()-1
registerDoParallel(ncore)
loop_result <- foreach(j=1:runs) %dopar% {
dist_active_sim <- data.frame(rbindlist(lapply(split(dist_active, dist_active$PLAYER_FULL_NAME), sim_share_of_minutes)))
x <- get_surplus_variables(dist_active_sim, nclus)
d <- attach_win_perc(thisgame, win_perc1, win_perc2)
return(data.frame(inner_join(x, d, by="game_id")))
}
samplesdf <- data.frame(rbindlist(loop_result))
}
### Offset to apply prior for the intercept
offset <- log((1-prior)*posterior / (prior*(1-posterior)))
print(offset)
### Score the model
x <- samplesdf[,names(samplesdf) %in% unique(model_variables$Variable)]
f <- as.formula(~.)
X <- model.matrix(f, x)
prob_win <- 1/(1+exp(-X%*%b[-1] + offset))
d <- data.frame(cbind(X*c[-1], distinct(select(samplesdf, game_id, DATE, home_team_name, road_team_name, selected_team, opposing_team), game_id, .keep_all=TRUE)), stringsAsFactors = FALSE) %>%
select(-X.Intercept.)
d$roster <- rowSums(select(d, starts_with("share_minutes_cluster")))
d$circumstances <- rowSums(select(d, opposing_team_travel, opposing_team_rest, selected_team_rest, selected_team_travel, home_team_selected))
d$performance <- rowSums(select(d, selected_team_matchup_wins, opposing_team_matchup_wins, winrate_season_selected_team, winrate_season_selected_team_adj, winrate_season_opposing_team, winrate_season_opposing_team_adj))
samplesdf$prob_win <- prob_win
samplesdf$d_prob_selected_team_win <- ifelse(samplesdf$prob_win>.5, 1.0, 0.0)
prediction <- group_by(samplesdf, game_id, DATE, home_team_name, road_team_name, selected_team, opposing_team) %>%
summarise(prob_selected_team_win_d=mean(as.numeric(prob_win)),
prob_selected_team_win_b=mean(as.numeric(d_prob_selected_team_win))) %>%
mutate(current_season_data_used=d_current_season_data_available,
future_game=future) %>%
ungroup()
prediction$selected_team_win <- w
return(list(data.frame(prediction), d))
}
### Predict the past and the future
counter <- 1
modelupdates <- 1
index <- 1
scores <- list()
model_details <- list()
model_parts <- list()
max_real_date <- max(subset(box_scores_plus, future_game==0)$DATE_INDEX)
for (i in start_index:end_index){
### Make sure we only use real data
j <- min(max_real_date, i)
## Are current rosters used to pick teams
cr <- use_current_rosters
### Check the dates
print(subset(datemap, DATE_INDEX==i)$DATE)
print(subset(datemap, DATE_INDEX==j)$DATE)
### Data inside the window
inwindow <- filter(box_scores_plus, DATE_INDEX<j & DATE_INDEX>j-estimation_window)
### Estimate the model unless we have run out of historical data
if (counter==1 | i <= j){
### Get game_id level data
game_data <- distinct(inwindow, game_id, .keep_all=TRUE)
### Combine the data
x <- get_surplus_variables(inwindow, nclus)  %>%
inner_join(game_data, by="game_id")
## Estimate the model
Y <- x$selected_team_win
x <- x[,names(x) %in% unique(model_variables$Variable)]
X <- model.matrix(as.formula(Y ~ .), x)
set.seed(2015)
model <- cv.glmnet(y=Y, x=X, family="binomial", alpha=alpha, parallel=FALSE, nfolds=10)
c <- as.matrix(coef(model, s=model$lambda.1se))
p <- prob_win <- 1/(1+exp(-X%*%c[-1]))
## Save model details
details <- cbind.data.frame(sapply(row.names(c), as.character), sapply(c, as.numeric), stringsAsFactors = FALSE)
names(details) <- c("Variable", "Coeff")
details$DATE <- subset(datemap, DATE_INDEX==i)$DATE
details$AUROC <- AUC(Y, p)[[1]]
details$N <- nrow(X)
model_details[[modelupdates]] <- subset(details, Variable != "(Intercept)")
modelupdates <- modelupdates+1
## Get the latest win percentages
thisseason <- filter(inwindow, DATE==max(DATE))[1,"season"]
w <- weighted_win_rates
if (thisseason != current_season){
w <-0
cr <- 0
}
if (w==1){
print("Using weights")
} else{
print("Not using weights")
}
win_perc1 <- winpercentages(filter(inwindow, DATE_INDEX>j-winstreak_window), thisseason, w)
win_perc2 <- winpercentages(filter(inwindow, DATE_INDEX>j-winstreak_window_s), thisseason, w)
}
posterior <- 0.5
prior <- 0.5
if (i==max_real_date){
ytd_scores <- data.frame(rbindlist(scores)) %>%
filter(current_season_data_used==1 & is.na(prob_selected_team_win_d)==FALSE & is.na(selected_team_win)==FALSE)
posterior=mean(ytd_scores$prob_selected_team_win_d)
prior=mean(ytd_scores$selected_team_win)
rm(ytd_scores)
}
print(posterior)
print(prior)
### Predict game outcomes
thisday <- filter(box_scores, DATE_INDEX==i)
games <- unique(thisday$game_id)
for (d in 1:length(games)){
pred <- predict_game(c, filter(inwindow, DATE_INDEX>j-playing_time_window), win_perc1, win_perc2, games[d], sims, subset(thisday, game_id==games[d]), nclus, prior, posterior, "/Users/kimlarsen/Documents/Code/NBA_RANKINGS/rawdata/", model_variables, cr)
scores[[counter]] <- pred[[1]]
model_parts[[counter]] <- pred[[2]]
counter <- counter + 1
}
}
library(dplyr)
library(ggplot2)
library(readxl)
library(data.table)
library(glmnet)
library(tidyr)
library(parallel)
library(foreach)
library(doParallel)
source("/Users/kimlarsen/Documents/Code/NBA_RANKINGS/functions/auc.R")
source("/Users/kimlarsen/Documents/Code/NBA_RANKINGS/functions/assign_clusters.R")
source("/Users/kimlarsen/Documents/Code/NBA_RANKINGS/functions/winpercentages.R")
source("/Users/kimlarsen/Documents/Code/NBA_RANKINGS/functions/predict_game.R")
source("/Users/kimlarsen/Documents/Code/NBA_RANKINGS/functions/get_surplus_variables.R")
source("/Users/kimlarsen/Documents/Code/NBA_RANKINGS/functions/reporting.R")
source("/Users/kimlarsen/Documents/Code/NBA_RANKINGS/functions/sim_playoffs.R")
source("/Users/kimlarsen/Documents/Code/NBA_RANKINGS/functions/attach_win_perc.R")
source("/Users/kimlarsen/Documents/Code/NBA_RANKINGS/functions/manipulate_and_save_output.R")
source("/Users/kimlarsen/Documents/Code/NBA_RANKINGS/functions/save_results.R")
## Read the box scores
box_scores <- readRDS("/Users/kimlarsen/Documents/Code/NBA_RANKINGS/cleandata/box_scores.RDA")
## Get the conferences
conferences <- read.csv("/Users/kimlarsen/Documents/Code/NBA_RANKINGS/rawdata/Conferences.csv", stringsAsFactors = FALSE)
### Create a date-index
datemap <- select(box_scores, DATE, future_game, season) %>%
ungroup() %>%
distinct(DATE, .keep_all=TRUE) %>%
arrange(DATE) %>%
mutate(DATE_INDEX=row_number()) %>%
group_by(season) %>%
mutate(season_day=row_number(),
season_day_std=ifelse(season_day>91, 0, 1-(season_day-1)/90)) %>%
ungroup()
box_scores <- inner_join(box_scores, select(datemap, DATE, DATE_INDEX, season_day, season_day_std), by="DATE")
## Get model variables
model_variables <- read.csv("/Users/kimlarsen/Documents/Code/NBA_RANKINGS/modeldetails/model_variables.csv", stringsAsFactors = FALSE)
### Global settings
cutoff <- 8 # minutes per game. if a player plays less than this amount, he is excluded
estimation_window <- 1000 # number of days used to estimate the model
winstreak_window <- 91 # number of days used to calculate the weighted win %, for the short term effect
winstreak_window_s <- 31 # number of days used to calculate the weighted win %
playing_time_window <- 91 # number of days used to estimate average playing time
cluster_window <- 91 # number of days used for cluster assignment
alpha <- 0 # for elastic net
sims <- 0 # number of random normal draws used when playing games
save_results <- 1 # set to 1 if you want to save the results
weighted_win_rates <- 1
use_current_rosters <- 1
current_season <- max(box_scores$season)
adjust_intercept_by_team <- 0
### When to start and end the forecasts
start_date <- min(subset(box_scores, season==2016)$DATE)
end_date <- max(subset(box_scores, season==2016 & playoffs==0)$DATE)
### Cut off the box scores
box_scores <- subset(box_scores, DATE<=end_date) %>%
ungroup() %>%
mutate(fb=ifelse(season==max(season), 1, 0))
### specify start and end points
ignore_season_prior_to <- 2013
start_index <- subset(datemap, DATE==start_date)$DATE_INDEX
end_index <- subset(datemap, DATE==end_date)$DATE_INDEX
### Assign clusters to the historical data and calculate rolling win percentages
centroids <- readRDS("/Users/kimlarsen/Documents/Code/NBA_RANKINGS/centroids/centroids.RDA")
s <- min(subset(datemap, season==ignore_season_prior_to)$DATE_INDEX)
e <-max(subset(datemap, future_game==0)$DATE_INDEX)
ncore <- detectCores()-2
registerDoParallel(ncore)
loop_result <- foreach(i=s:e) %dopar% {
#for (i in s:e){
### Get the data inside the window
thisseason <- datemap[i, "season"]
inwindow <- filter(box_scores, DATE_INDEX<i & DATE_INDEX>i-cluster_window)
thisdate <- filter(box_scores, DATE_INDEX==i)
thisseason <- thisdate[1,"season"]
## Get the win percentages
w <- weighted_win_rates
if (thisseason != current_season){
w <-0
}
win_perc1 <- winpercentages(filter(inwindow, DATE_INDEX>i-winstreak_window), thisseason, w)
win_perc2 <- winpercentages(filter(inwindow, DATE_INDEX>i-winstreak_window_s), thisseason, w)
## Assign clusters
clusters <- assign_clusters(centroids, inwindow, cutoff, thisseason)
### Join
t <- inner_join(thisdate, select(clusters, PLAYER_FULL_NAME, Cluster), by="PLAYER_FULL_NAME")
f <- attach_win_perc(t, win_perc1, win_perc2)
rm(win_perc1)
rm(win_perc2)
return(f)
}
box_scores_plus <- data.frame(rbindlist(loop_result))
## Save clusters
clusters_and_players <-
select(box_scores_plus, DATE, PLAYER_FULL_NAME, Cluster, points, assists, offensive_rebounds, defensive_rebounds, turnovers, threepointers_made, threepoint_attempts, steals, minutes, fieldgoal_attempts, fieldgoals_made, freethrow_attempts, freethrows_made, fouls, blocks, season) %>%
ungroup() %>%
filter(season==max(season)) %>%
distinct(PLAYER_FULL_NAME, .keep_all=TRUE) %>%
arrange(Cluster, PLAYER_FULL_NAME, DATE)
### Number of clusters
nclus <- max(box_scores_plus$Cluster)
### Predict the past and the future
counter <- 1
modelupdates <- 1
index <- 1
scores <- list()
model_details <- list()
model_parts <- list()
max_real_date <- max(subset(box_scores_plus, future_game==0)$DATE_INDEX)
posterior <- 0.5 ## average probability of winning a game if all is perfect
prior <- 0.5 ## expected average probability of winning a game
cr <- 0 ## current rosters
for (i in start_index:end_index){
### ELO weight indicator
w <- weighted_win_rates ## ELO weights
### Make sure we only use real data
j <- min(max_real_date, i)
### Check the dates
print(subset(datemap, DATE_INDEX==i)$DATE)
print(subset(datemap, DATE_INDEX==j)$DATE)
### Data inside the window
inwindow <- filter(box_scores_plus, DATE_INDEX<j & DATE_INDEX>j-estimation_window)
### Estimate the model unless we have run out of historical data
if (counter==1 | i <= max_real_date){
### Get game_id level data
game_data <- distinct(inwindow, game_id, .keep_all=TRUE)
### Combine the data
x <- get_surplus_variables(inwindow, nclus)  %>%
inner_join(game_data, by="game_id")
## Estimate the model
Y <- x$selected_team_win
x <- x[,names(x) %in% unique(model_variables$Variable)]
X <- model.matrix(as.formula(Y ~ .), x)
set.seed(2015)
model <- cv.glmnet(y=Y, x=X, family="binomial", alpha=alpha, parallel=FALSE, nfolds=10)
c <- as.matrix(coef(model, s=model$lambda.1se))
p <- 1/(1+exp(-X%*%c[-1]))
## Save model details
details <- cbind.data.frame(sapply(row.names(c), as.character), sapply(c, as.numeric), stringsAsFactors = FALSE)
names(details) <- c("Variable", "Coeff")
details$DATE <- subset(datemap, DATE_INDEX==i)$DATE
details$AUROC <- AUC(Y, p)[[1]]
details$N <- nrow(X)
model_details[[modelupdates]] <- subset(details, Variable != "(Intercept)")
modelupdates <- modelupdates+1
## Get the latest win percentages
thisseason <- filter(inwindow, DATE==max(DATE))[1,"season"]
if (thisseason != current_season){
w <-0
}
inwindow <- filter(inwindow, DATE_INDEX>j-max(winstreak_window, playing_time_window))
win_perc1 <- winpercentages(inwindow, thisseason, w)
win_perc2 <- winpercentages(inwindow, thisseason, w)
}
### Special case for the last observed day
offsets_by_team <- NULL
if (i==max_real_date){
if (thisseason==current_season){
cr <- use_current_rosters
}
ytd_scores <- data.frame(rbindlist(scores)) %>%
filter(current_season_data_used==1 & is.na(prob_selected_team_win_d)==FALSE & is.na(selected_team_win)==FALSE)
posterior=mean(ytd_scores$prob_selected_team_win_d)
prior=mean(ytd_scores$selected_team_win)
if (adjust_intercept_by_team==1){
offsets_by_team_ <- group_by(ytd_scores, selected_team) %>%
summarise(posterior=mean(prob_selected_team_win_d),
prior=mean(selected_team_win)) %>%
mutate(teamoffset=log((1-prior)*posterior / (prior*(1-posterior)))) %>%
select(teamoffset, selected_team) %>%
ungroup()
}
rm(ytd_scores)
### Get the latest data for forecasting
inwindow <- filter(box_scores_plus, DATE_INDEX<=max_real_date & DATE_INDEX>max_real_date-playing_time_window+1)
win_perc1 <- winpercentages(inwindow, thisseason, w)
win_perc2 <- winpercentages(inwindow, thisseason, w)
}
### Predict game outcomes
thisday <- filter(box_scores, DATE_INDEX==i)
games <- unique(thisday$game_id)
thisdate <- max(thisday$DATE)
inwindow_active <- mutate(inwindow,
today=as.Date(thisdate),
injured=ifelse(is.na(injury_status), 0, ifelse(today>=injury_scrape_date & today<return_date, 1, 0))
)
injured_players <- unique(subset(inwindow_active, injured==1)$PLAYER_FULL_NAME)
if (length(injured_players)>0){
print(paste0("Injuries: ", injured_players))
inwindow_active <- filter(inwindow_active, injured==0)
}
if (w==1){
print("Using CARM-ELO weights")
}
if (cr==1){
print("Using current scraped rosters")
}
for (d in 1:length(games)){
pred <- predict_game(c, filter(inwindow_active, DATE_INDEX>j-playing_time_window), win_perc1, win_perc2, games[d], sims, subset(thisday, game_id==games[d]), nclus, prior, posterior, "/Users/kimlarsen/Documents/Code/NBA_RANKINGS/rawdata/", model_variables, cr, offsets_by_team)
scores[[counter]] <- pred[[1]]
model_parts[[counter]] <- pred[[2]]
counter <- counter + 1
}
rm(inwindow_active)
rm(inwindow)
}
### Manipulate and save the output
#results <- manipulate_and_save_output(clusters_and_players, scores, model_parts, model_details, "/Users/kimlarsen/Documents/Code/NBA_RANKINGS/", 0, 1, as.Date("2016-11-20"))
#results <- manipulate_and_save_output(clusters_and_players, scores, model_parts, model_details, "/Users/kimlarsen/Documents/Code/NBA_RANKINGS/", 0, 0)
results <- manipulate_and_save_output(clusters_and_players, scores, model_parts, model_details, "/Users/kimlarsen/Documents/Code/NBA_RANKINGS/", 0, 1, NA)
library(xlsx)
library(dplyr)
library(readxl)
library(stringi)
library(tidyr)
library(reshape2)
library(data.table)
library(dplyr)
library(ggmap)
library(parallel)
library(foreach)
library(doParallel)
library(rvest)
library(stringr)
source("/Users/kimlarsen/Documents/Code/NBA_RANKINGS/functions/distance_between.R")
cbs_injuries <- read_html("http://www.cbssports.com/nba/injuries/daily")
PLAYER_FULL_NAME <- cbs_injuries %>% html_nodes("tr.row1 td:nth-child(3), tr.row2 td:nth-child(3)") %>% html_text()
return_notes <- cbs_injuries %>% html_nodes("tr.row1 td:nth-child(6), tr.row2 td:nth-child(6)") %>% html_text()
daily_injuries <- data.frame(PLAYER_FULL_NAME,
return_notes,
stringsAsFactors = FALSE) %>%
mutate(clean_note=gsub("Expected to be out until at least ", "", return_notes))
convert_to_date <- function(data){
if (data$clean_note=="Game Time Decision"){
data$return_date <- Sys.Date() + 1
} else if (data$clean_note=="Out for the season"){
data$return_date <- as.Date("2017-10-25")
} else{
data$return_date <- as.Date(data$clean_note, format="%b %d")
}
if (data$return_date<Sys.Date()){
data$return_date <- data$return_date + 365
}
return(data)
}
daily_injuries <- data.frame(rbindlist(lapply(split(daily_injuries, daily_injuries$PLAYER_FULL_NAME), convert_to_date)), stringsAsFactors = FALSE) %>%
select(PLAYER_FULL_NAME, return_date) %>% distinct(PLAYER_FULL_NAME, .keep_all=TRUE)
### Read 538 data
ft8 <- read_html("http://projects.fivethirtyeight.com/2017-nba-predictions/") %>%
html_nodes("#standings-table") %>% html_table(fill=TRUE)
ft8df <- data.frame(rbindlist(ft8))
wins <- as.numeric(str_split_fixed(ft8df[4:nrow(ft8df),"Avg..Simulated.SeasonAvg..Simulation"], "-", 2)[,1])
losses <- as.numeric(str_split_fixed(ft8df[4:nrow(ft8df),"Avg..Simulated.SeasonAvg..Simulation"], "-", 2)[,2])
team <- gsub("[0-9, -]", "", ft8df[4:nrow(ft8df),"V5"])
elo <- ft8df[4:nrow(ft8df),"V1"]
carm_elo <- ft8df[4:nrow(ft8df),"V2"]
team[team=="ers"] <- "Philadelphia"
team[team=="Hornets"] <- "Charlotte"
team[team=="Clippers"] <- "LA Clippers"
team[team=="Cavaliers"] <- "Cleveland"
team[team=="Warriors"] <- "Golden State"
team[team=="Spurs"] <- "San Antonio"
team[team=="Raptors"] <- "Toronto"
team[team=="Jazz"] <- "Utah"
team[team=="Thunder"] <- "Oklahoma City"
team[team=="TrailBlazers"] <- "Portland"
team[team=="Rockets"] <- "Houston"
team[team=="Pelicans"] <- "New Orleans"
team[team=="Celtics"] <- "Boston"
team[team=="Timberwolves"] <- "Minnesota"
team[team=="Bulls"] <- "Chicago"
team[team=="Hawks"] <- "Atlanta"
team[team=="Pistons"] <- "Detroit"
team[team=="Nuggets"] <- "Denver"
team[team=="Mavericks"] <- "Dallas"
team[team=="Wizards"] <- "Washington"
team[team=="Lakers"] <- "LA Lakers"
team[team=="Kings"] <- "Sacramento"
team[team=="Knicks"] <- "New York"
team[team=="Grizzlies"] <- "Memphis"
team[team=="Pacers"] <- "Indiana"
team[team=="Bucks"] <- "Milwaukee"
team[team=="Magic"] <- "Orlando"
team[team=="Heat"] <- "Miami"
team[team=="Suns"] <- "Phoenix"
team[team=="Nets"] <- "Brooklyn"
fivethirtyeight <- data.frame(team, elo=as.numeric(elo), carm_elo=as.numeric(carm_elo),
wins_538=as.numeric(wins),
losses_538=as.numeric(losses), stringsAsFactors = FALSE) %>%
mutate(selected_team=as.character(team), opposing_team=as.character(team),
elo=elo, carm_elo=carm_elo,
pred_win_rate_538=wins_538/(wins_538+losses_538)) %>%
select(-team)
setwd("/Users/kimlarsen/Documents/Code/NBA_RANKINGS/rawdata/")
### Injury status
source_injuries <- read_html("http://espn.go.com/nba/injuries")
players <- source_injuries %>%
html_nodes('table tr.oddrow a, table tr.evenrow a') %>%
html_text()
statuses <- source_injuries %>%
html_nodes('table tr.oddrow td:nth-child(2), table tr.evenrow  td:nth-child(2)') %>%
html_text()
dates <- source_injuries %>%
html_nodes('table tr.oddrow td:nth-child(3), table tr.evenrow  td:nth-child(3)') %>%
html_text()
injuries <- data.frame(
PLAYER_FULL_NAME = players,
injury_status = statuses,
injury_date = dates,
stringsAsFactors = FALSE
) %>% arrange(PLAYER_FULL_NAME, desc(injury_date)) %>%
distinct(PLAYER_FULL_NAME, .keep_all=TRUE) %>%
left_join(daily_injuries, by="PLAYER_FULL_NAME") %>%
mutate(injury_scrape_date=Sys.Date())
injuries[is.na(injuries$return_date),"return_date"] <- Sys.Date()+1
## Current rosters
stats_page <- read_html("http://www.nbastuffer.com/2016-2017_NBA_Regular_Season_Player_Stats.html")
players <- stats_page %>%
html_nodes("tbody#PLAYER tr td:nth-child(2)") %>%
html_text()
teams <- stats_page %>%
html_nodes("tbody#PLAYER tr td:nth-child(3)") %>%
html_text()
rosters <- data.frame(
PLAYER_FULL_NAME = players,
NBAstuffer.Initials = teams,
stringsAsFactors = FALSE)
team_map <- data.frame(read_excel("schedule.xlsx", sheet=2)) %>%
select(City, NBAstuffer.Initials) %>% distinct(NBAstuffer.Initials, .keep_all=TRUE)
rosters <- inner_join(rosters, team_map, by="NBAstuffer.Initials") %>%
rename(OWN_TEAM=City) %>%
select(OWN_TEAM, PLAYER_FULL_NAME) %>%
arrange(OWN_TEAM, PLAYER_FULL_NAME) %>%
left_join(injuries, by="PLAYER_FULL_NAME")
write.csv(fivethirtyeight, paste0("FiveThirtyEight_current.csv"), row.names = FALSE)
manipulate_and_save_output <- function(clusters_and_players, scores, model_parts, model_details, root, back_test, save, overwrite_date=NA){
Date <- Sys.Date()
if (is.na(overwrite_date)==FALSE){
Date <- overwrite_date
}
if (back_test==0){
ft8 <- read.csv(paste0(root, "/rawdata/FiveThirtyEight_current.csv"), stringsAsFactors = FALSE) %>%
rename(team=selected_team) %>%
select(team, pred_win_rate_538)
game_level <- data.frame(rbindlist(scores), stringsAsFactors = FALSE) %>%
select(-prob_selected_team_win_b) %>%
mutate(d_pred_selected_team_win=ifelse(current_season_data_used==0, NA, as.numeric(prob_selected_team_win_d>0.5)),
prob_selected_team_win=ifelse(current_season_data_used==0, NA, prob_selected_team_win_d))
ranks <- report(game_level, "d_pred_selected_team_win") %>%
left_join(conferences, by="team") %>%
select(team, games_season, games_played, games_future, season_win_rate, ytd_win_rate, future_win_rate, conference, division) %>%
left_join(ft8, by="team")
models <- data.frame(rbindlist(model_details), stringsAsFactors = FALSE)
parts <- data.frame(rbindlist(model_parts), stringsAsFactors = FALSE)
details <- mutate(game_level,
d_road_team_predicted_win=ifelse(is.na(d_pred_selected_team_win), NA, ifelse(selected_team==road_team_name, d_pred_selected_team_win, 1-d_pred_selected_team_win)),
d_home_team_predicted_win=ifelse(is.na(d_pred_selected_team_win), NA, 1-d_road_team_predicted_win),
predicted_winner=ifelse(is.na(d_pred_selected_team_win), "NA", ifelse(d_road_team_predicted_win==1, road_team_name, home_team_name)),
actual_winner=ifelse(is.na(selected_team_win), "NA", ifelse(selected_team_win==1, selected_team, opposing_team)),
home_team_prob_win=ifelse(is.na(d_pred_selected_team_win), NA, ifelse(selected_team==home_team_name, prob_selected_team_win_d, 1-prob_selected_team_win_d)),
road_team_prob_win=ifelse(is.na(d_pred_selected_team_win), NA, 1-home_team_prob_win)) %>%
mutate(predicted_winner=ifelse(future_game==0, "NA", predicted_winner),
d_road_team_predicted_win=ifelse(future_game==0, NA, d_road_team_predicted_win),
d_home_team_predicted_win=ifelse(future_game==0, NA, d_home_team_predicted_win),
home_team_prob_win=ifelse(future_game==0, NA, home_team_prob_win),
road_team_prob_win=ifelse(future_game==0, NA, road_team_prob_win)) %>%
select(DATE, home_team_name, road_team_name, road_team_prob_win, home_team_prob_win, predicted_winner, actual_winner, current_season_data_used, future_game)
if (save==1){
write.csv(ranks, paste0(root, "/rankings/rankings_",Date, ".csv"), row.names = FALSE)
write.csv(details, paste0(root,"/rankings/game_level_predictions_",Date, ".csv"), row.names = FALSE)
write.csv(clusters_and_players, paste0(root, "/modeldetails/cluster_details_",Date, ".csv"), row.names = FALSE)
write.csv(models, paste0(root, "/modeldetails/coefficients_", Date, ".csv"), row.names = FALSE)
write.csv(parts, paste0(root, "/modeldetails/score_decomp_", Date, ".csv"), row.names = FALSE)
}
return(list(game_level, ranks, models, details))
} else{
game_level <- data.frame(rbindlist(scores), stringsAsFactors = FALSE) %>%
select(-prob_selected_team_win_b) %>%
mutate(prob_selected_team_win=ifelse(current_season_data_used==0, NA, prob_selected_team_win_d),
d_pred_selected_team_win=ifelse(current_season_data_used==0, NA, as.numeric(prob_selected_team_win>0.5)))
ranks <- report(game_level, "d_pred_selected_team_win")
models <- data.frame(rbindlist(model_details), stringsAsFactors = FALSE)
return(list(game_level, ranks, models))
}
}
results <- manipulate_and_save_output(clusters_and_players, scores, model_parts, model_details, "/Users/kimlarsen/Documents/Code/NBA_RANKINGS/", 0, 1, NA)
