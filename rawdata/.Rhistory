arrange(merch_week) %>%
group_by(merch_week) %>%
summarise(Expected=mean(Expected), Observed=mean(Observed))
gather(scores, "metric", "value", 2:3) %>%
ggplot(aes(x=merch_week, y=value, color=metric)) + geom_line(size=1) +
ylab("KR") + xlab("Merch Week") + theme(legend.title = element_blank()) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
scale_x_date(breaks = pretty_breaks(20)) + ggtitle("Expected versus Actual (Fixes 2+)")
View(scores)
monthly <- group_by(fixes, calendar_month) %>%
summarise(drop=mean(drop),
sf_credit=mean(sf_credit),
sf_waived=mean(sf_waived),
sf_credit_special=mean(sf_credit_special),
accidental_fix=mean(accidental_fix),
items_sold=mean(items_sold),
exchanged_flag=mean(exchanged_flag),
sum_price_just_right=mean(sum_price_just_right),
N=sum(N))
ggplot(data=monthly, aes(factor(calendar_month), drop)) + geom_bar(stat="identity") +
ggtitle("Records dropped") + theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(data=monthly, aes(factor(calendar_month), sum_price_just_right)) + geom_bar(stat="identity") +
ggtitle("Price Just Right") + theme(axis.text.x = element_text(angle = 90, hjust = 1))
View(monthly)
View(monthly)
library(dplyr)
library(tidyr)
library(ggplot2)
library(scales)
mutate(fixes,
feedback=ifelse(anticipating_next_fix==1 &
style_score==5 &
satisfied_score==5 &
sum_price_just_right>4,
"Great", "Other")) %>%
filter(calendar_month < as.Date("2016-12-17")) %>%
filter(drop==0) %>%
group_by(merch_week, feedback) %>%
summarise(items_sold=mean(items_sold)) %>%
ggplot(aes(x=calendar_month, y=items_sold)) + geom_line(size=1) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) + theme(legend.title = element_blank()) +
facet_grid(feedback ~ ., scales="free") + scale_x_date(breaks = pretty_breaks(30)) +
ylab("KR") + xlab("Merch Week")
mutate(fixes,
feedback=ifelse(anticipating_next_fix==1 &
style_score==5 &
satisfied_score==5 &
sum_price_just_right>4,
"Great", "Other")) %>%
#filter(calendar_month < as.Date("2016-12-17")) %>%
filter(drop==0) %>%
group_by(calendar_month, feedback) %>%
summarise(items_sold=mean(items_sold)) %>%
ggplot(aes(x=calendar_month, y=items_sold)) + geom_line(size=1) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) + theme(legend.title = element_blank()) +
facet_grid(feedback ~ ., scales="free") + scale_x_date(breaks = pretty_breaks(30)) +
ylab("KR") + xlab("Merch Week")
mutate(fixes,
feedback=ifelse(sum_price_just_right>4,
"Great", "Other")) %>%
#filter(calendar_month < as.Date("2016-12-17")) %>%
filter(drop==0) %>%
group_by(calendar_month, feedback) %>%
summarise(items_sold=mean(items_sold)) %>%
ggplot(aes(x=calendar_month, y=items_sold)) + geom_line(size=1) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) + theme(legend.title = element_blank()) +
facet_grid(feedback ~ ., scales="free") + scale_x_date(breaks = pretty_breaks(30)) +
ylab("KR") + xlab("Merch Week")
filter(fixes,
drop==0 & sum_price_just_right>4) %>%
group_by(calendar_month, feedback) %>%
summarise(items_sold=mean(items_sold)) %>%
ggplot(aes(x=calendar_month, y=items_sold)) + geom_line(size=1) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) + theme(legend.title = element_blank())
ylab("KR") + xlab("Calendar Month")
filter(fixes,
drop==0 & sum_price_just_right>4) %>%
group_by(calendar_month) %>%
summarise(items_sold=mean(items_sold)) %>%
ggplot(aes(x=calendar_month, y=items_sold)) + geom_line(size=1) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) + theme(legend.title = element_blank())
ylab("KR") + xlab("Calendar Month")
filter(fixes,
drop==0 & sum_price_just_right>4) %>%
group_by(calendar_month) %>%
summarise(items_sold=mean(items_sold)) %>%
ggplot(aes(x=calendar_month, y=items_sold)) + geom_line(size=1) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) + theme(legend.title = element_blank()) +
ylab("KR") + xlab("Calendar Month")
View(monthly)
filter(fixes,
drop==0 & sum_price_just_right>4) %>%
group_by(calendar_month) %>%
summarise(items_sold=mean(items_sold)) %>%
ggplot(aes(x=calendar_month, y=items_sold)) + geom_line(size=1) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) + theme(legend.title = element_blank()) +
ylab("KR") + xlab("Calendar Month") + scale_x_date(breaks = pretty_breaks(30))
library(xlsx)
library(dplyr)
library(readxl)
library(stringi)
library(tidyr)
library(reshape2)
library(data.table)
library(dplyr)
library(ggmap)
library(parallel)
library(foreach)
library(doParallel)
library(rvest)
library(stringr)
source("/Users/kimlarsen/Documents/Code/NBA_RANKINGS/functions/distance_between.R")
setwd("/Users/kimlarsen/Documents/Code/NBA_RANKINGS/rawdata/")
team_map <- data.frame(read_excel("schedule.xlsx", sheet=2)) %>%
distinct(Team, .keep_all=TRUE) %>% select(City, NBAstuffer.Initials, Team) %>%
filter(!(Team %in% c("Charlotte Bobcats", "New Orleans Hornets")))
### 538 data
ft8 <- read_html("http://projects.fivethirtyeight.com/2017-nba-predictions/")
team <- ft8 %>% html_nodes("tbody tr td.team a") %>% html_text() %>% gsub("[0-9, -]", "", .)
wins <- ft8 %>% html_nodes("tbody tr td.proj-rec") %>% html_text() %>% gsub('-[0-9]+','', .)
losses <- ft8 %>% html_nodes("tbody tr td.proj-rec") %>% html_text() %>% gsub('[0-9]+-','', .)
elo <- ft8 %>% html_nodes("tbody tr td.elo.original") %>% html_text()
carm_elo <- ft8 %>% html_nodes("tbody tr td.carmelo") %>% html_text()
team[team=="ers"] <- "Philadelphia"
team[team=="Hornets"] <- "Charlotte"
team[team=="Clippers"] <- "LA Clippers"
team[team=="Cavaliers"] <- "Cleveland"
team[team=="Warriors"] <- "Golden State"
team[team=="Spurs"] <- "San Antonio"
team[team=="Raptors"] <- "Toronto"
team[team=="Jazz"] <- "Utah"
team[team=="Thunder"] <- "Oklahoma City"
team[team=="TrailBlazers"] <- "Portland"
team[team=="Rockets"] <- "Houston"
team[team=="Pelicans"] <- "New Orleans"
team[team=="Celtics"] <- "Boston"
team[team=="Timberwolves"] <- "Minnesota"
team[team=="Bulls"] <- "Chicago"
team[team=="Hawks"] <- "Atlanta"
team[team=="Pistons"] <- "Detroit"
team[team=="Nuggets"] <- "Denver"
team[team=="Mavericks"] <- "Dallas"
team[team=="Wizards"] <- "Washington"
team[team=="Lakers"] <- "LA Lakers"
team[team=="Kings"] <- "Sacramento"
team[team=="Knicks"] <- "New York"
team[team=="Grizzlies"] <- "Memphis"
team[team=="Pacers"] <- "Indiana"
team[team=="Bucks"] <- "Milwaukee"
team[team=="Magic"] <- "Orlando"
team[team=="Heat"] <- "Miami"
team[team=="Suns"] <- "Phoenix"
team[team=="Nets"] <- "Brooklyn"
fivethirtyeight <- data.frame(team, elo=as.numeric(elo),
carm_elo=as.numeric(carm_elo),
wins_538=as.numeric(wins),
losses_538=as.numeric(losses),
stringsAsFactors = FALSE) %>%
mutate(selected_team=as.character(team), opposing_team=as.character(team),
elo=elo, carm_elo=carm_elo,
pred_win_rate_538=wins_538/(wins_538+losses_538)) %>%
select(-team)
### Injury return dates from CBS
cbs_injuries <- read_html("http://www.cbssports.com/nba/injuries/daily")
PLAYER_FULL_NAME <- cbs_injuries %>% html_nodes("tr.row1 td:nth-child(3), tr.row2 td:nth-child(3)") %>% html_text()
return_notes <- cbs_injuries %>% html_nodes("tr.row1 td:nth-child(6), tr.row2 td:nth-child(6)") %>% html_text()
daily_injuries <- data.frame(PLAYER_FULL_NAME,
return_notes,
stringsAsFactors = FALSE) %>%
mutate(clean_note=gsub("Expected to be out until at least ", "", return_notes))
convert_to_date <- function(data){
if (data$clean_note=="Game Time Decision"){
data$return_date <- Sys.Date() + 1
} else if (data$clean_note=="Out for the season"){
data$return_date <- as.Date("2017-10-25")
} else{
data$return_date <- as.Date(data$clean_note, format="%b %d")
}
if (data$return_date<Sys.Date()){
data$return_date <- data$return_date + 365
}
return(data)
}
daily_injuries <- data.frame(rbindlist(lapply(split(daily_injuries, daily_injuries$PLAYER_FULL_NAME), convert_to_date)), stringsAsFactors = FALSE) %>%
select(PLAYER_FULL_NAME, return_date) %>% distinct(PLAYER_FULL_NAME, .keep_all=TRUE)
### Injury status from ESPN
source_injuries <- read_html("http://espn.go.com/nba/injuries")
players <- source_injuries %>%
html_nodes('table tr.oddrow a, table tr.evenrow a') %>%
html_text()
statuses <- source_injuries %>%
html_nodes('table tr.oddrow td:nth-child(2), table tr.evenrow  td:nth-child(2)') %>%
html_text()
dates <- source_injuries %>%
html_nodes('table tr.oddrow td:nth-child(3), table tr.evenrow  td:nth-child(3)') %>%
html_text()
injuries <- data.frame(
PLAYER_FULL_NAME = players,
injury_status = statuses,
injury_date = dates,
stringsAsFactors = FALSE
) %>% arrange(PLAYER_FULL_NAME, desc(injury_date)) %>%
distinct(PLAYER_FULL_NAME, .keep_all=TRUE) %>%
left_join(daily_injuries, by="PLAYER_FULL_NAME") %>%
distinct(PLAYER_FULL_NAME, .keep_all=TRUE) %>%
mutate(injury_scrape_date=Sys.Date())
injuries[is.na(injuries$return_date),"return_date"] <- Sys.Date()+1
### Get the current rosters
team_pages <- read_html("http://www.espn.com/nba/teams") %>%
html_nodes("ul.medium-logos span a:nth-child(3)") %>% html_attr("href")
rosters <- lapply(team_pages, function (team_link) {
team_link <- paste0('http://www.espn.com', team_link)
team_roster <- read_html(team_link)
team_name <- team_roster %>% html_nodes("h2.logo b") %>% html_text()
team_name[team_name=="LA Clippers"] <- "Los Angeles Clippers"
team_name[team_name=="Portland Trail Blazers"] <- "Portland Trailblazers"
data <- sapply(1:8, function(col) {
team_roster %>% html_nodes(paste0("tr.evenrow > td:nth-child(",col,"), tr.oddrow > td:nth-child(",col,")")) %>% html_text()
})
data <- data.frame(data, stringsAsFactors = FALSE)
colnames(data) <- c('Number','PLAYER_FULL_NAME','Position','Age','Height','Weight','College','Salary')
data$Team <- team_name
data$Age <- as.numeric(data$Age)
data$Weight <- as.numeric(data$Weight)
data$Salary <- as.numeric(gsub(',','',gsub('\\$', '', data$Salary)))
data
})
all_rosters <- bind_rows(lapply(rosters, function(x) as.data.frame(x))) %>%
left_join(team_map, by="Team") %>%
rename(OWN_TEAM=City) %>%
select(PLAYER_FULL_NAME, OWN_TEAM, Position, Age, Height, Weight, Salary, Team) %>%
arrange(PLAYER_FULL_NAME, OWN_TEAM) %>%
left_join(injuries, by="PLAYER_FULL_NAME") %>%
distinct(PLAYER_FULL_NAME, .keep_all=TRUE)
## Save scraped data
write.csv(all_rosters, "rosters_current.csv", row.names = FALSE)
write.csv(all_rosters, paste0("rosters_", Sys.Date(), ".csv"), row.names = FALSE)
write.csv(fivethirtyeight, paste0("FiveThirtyEight_", Sys.Date(), ".csv"), row.names = FALSE)
write.csv(fivethirtyeight, paste0("FiveThirtyEight_current.csv"), row.names = FALSE)
write.csv(injuries, paste0("injuries_", Sys.Date(), ".csv"), row.names = FALSE)
write.csv(injuries, "injuries_current.csv", row.names = FALSE)
library(dplyr)
library(tidyr)
library(ggplot2)
library(scales)
tt <- filter(fixes, drop==0) %>% mutate(Y=items_sold)
f <- as.formula(Y ~  items_sold_lf + algo_score + exchanged_flag + kr_lt +
anticipating_next_fix + as.factor(style_score) + d_no_ratings +
as.factor(satisfied_score) + sum_price_just_right)
m <- lm(data=tt, f)
summary(m)
scores <- data.frame(merch_week=tt$merch_week,
calendar_month=tt$calendar_month,
Observed=tt$Y,
Expected=m$fitted.values,
residual=m$residuals,
month=as.factor(tt$month_of_fix)) %>%
arrange(merch_week) %>%
group_by(merch_week) %>%
summarise(Expected=mean(Expected), Observed=mean(Observed))
gather(scores, "metric", "value", 2:3) %>%
ggplot(aes(x=merch_week, y=value, color=metric)) + geom_line(size=1) +
ylab("KR") + xlab("Merch Week") + theme(legend.title = element_blank()) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
scale_x_date(breaks = pretty_breaks(20)) + ggtitle("Expected versus Actual (Fixes 2+)")
scores <- data.frame(merch_week=tt$merch_week,
calendar_month=tt$calendar_month,
Observed=tt$Y,
Expected=m$fitted.values,
residual=m$residuals,
month=as.factor(tt$month_of_fix)) %>%
arrange(calendar_month) %>%
group_by(calendar_month) %>%
summarise(Expected=mean(Expected), Observed=mean(Observed))
gather(scores, "metric", "value", 2:3) %>%
ggplot(aes(x=calendar_month, y=value, color=metric)) + geom_line(size=1) +
ylab("KR") + xlab("Calendar Month") + theme(legend.title = element_blank()) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
scale_x_date(breaks = pretty_breaks(20)) + ggtitle("Expected versus Actual (Fixes 2+)")
library(chance)
query="
with si AS (
select shipment_id,
avg(algorithm_score) AS algo_score --algorithm score
from prod.shipmentitem
group by shipment_id
),
autoship_cancel_keep_next_fix as (
select
s.shipment_id,
1 as accidental_fix
from reservations r1
join (select *, min(client_wants_fix_on :: date) over(partition by client_id, subscription_id, cancelled_reason_code) as next_fix_date ,
min(id) over(partition by client_id, subscription_id, cancelled_reason_code) as first_cancelled_fix
from reservations) r2
on (r1.client_id = r2.client_id)
and (r1.client_wants_fix_on = r2.client_wants_fix_on)
left join shipment s on r1.client_id = s.client_id and r1.id = s.reservation_id
left join request_device rd on rd.shipment_request_id = r1.shipment_request_id
where
date_trunc('sec', r1.created_at) BETWEEN date_trunc('sec', r2.cancelled_at) AND DATEADD(sec, 1, date_trunc('sec', r2.cancelled_at)) -- next fix reservation created at the same time that a subscription was cancelled
and r1.client_wants_fix_on = r2.next_fix_date
and r2.cancelled_at :: date - r2.created_at :: date >= 1  -- didnt create and cancel autoship in same day
and r2.subscription_id is not null -- was part of a subscription
and r2.cancelled_at > '2015-01-31'
and s.shipment_id is not null
and r1.subscription_id is null -- not part of a new subscription, not a reschedule
and r1.cancelled_at is null -- not cancelled
and ((r2.cancelled_reason_code = 'cancel_subscription' and r1.shipment_request_id is null) -- if not created with app, then coded correctly as cancel_subscription
OR (r2.cancelled_reason_code = 'manual schedule' and rd.device = 'mobile_app' and r1.shipment_request_id is not null)) -- if created with mobile app, then a shipment_request_id is generated
),
inventory_quality AS (
SELECT shipment_id,
SUM(availqualif) AS availqualif
FROM   inventory_relevance
GROUP BY shipment_id
HAVING min(as_of) = max(as_of)
),
price as (
select sum(case when price_rating is not NULL then 1 else 0 end) as n_price_rating,
sum(case when price_rating=0 then 1 else 0 end) as sum_price_just_right,
shipment_id
from shipmentitem
group by shipment_id
)
select --CURRENT FIX METRICS
s1.items_sold, --items_sold
algo_score, --avg algo score,
date_trunc('week', convert_timezone('pdt8pst',s1.checkout_ts)+1) :: date + 5 as merch_week,
date_trunc('month', convert_timezone('pdt8pst',s1.checkout_ts)) :: date as calendar_month,
s1.fix_number as fix_number,
cch.cumulative_items_lt/cch.cumulative_fixes_lt as kr_lt,
--LAST FIX (lf)
s2.items_sold AS items_sold_lf, -- last fix keep rate
s1.anticipating_next_fix AS anticipating_next_fix, --anticipating
p.sum_price_just_right, p.n_price_rating,
s1.satisfied_score AS satisfied_score, --satisfied
s1.style_score AS style_score, --style
--CLIENT LifeTime (lt)
cch.cumulative_fixes_lt AS fixes_lt, --tenure
cch.cumulative_items_lt AS items_lt, --items
-- styling fee paid
case when inv.styling_fee_doc_applied=20 or inv.wsf_flag=1 then 1 else 0 end as sf_credit,
case when inv.styling_fee_charge = 0
and inv.styling_fee_doc_applied = 0
and inv.styling_fee_referral_credit_applied = 0
and inv.styling_fee_alternate_tender_applied = 0
then 1 else 0 end as sf_waived,
cbl.business_line as business_line,
s1.truant_checkout_flag,
s1.lazy_checkout_flag,
coalesce(inv.exchanged_flag,0) as exchanged_flag,
coalesce(a.accidental_fix,0) as accidental_fix,
--MONTH OF FIX
extract('month' from s1.checkout_ts) as month_of_fix,
s1.checkout_ts :: date as Date,
iq.availqualif as availqualif
from shipment s1 -- current fix
left join si on si.shipment_id = s1.shipment_id
-- join to get last fix metrics
left join prod.shipment s2 on (s1.fix_number - 1) = s2.fix_number and s1.client_id = s2.client_id
left join client_class_history cch on cch.client_id = s1.client_id and cch.as_of = s1.styled_ts :: date
left join prod.shipment_invoices inv on inv.shipment_id=s1.shipment_id
left join client_business_lines cbl on cbl.client_id = s1.client_id
left join inventory_quality iq on iq.shipment_id=s1.shipment_id
left join autoship_cancel_keep_next_fix a on a.shipment_id=s1.shipment_id
inner join price p on p.shipment_id=s1.shipment_id
where s1.checkout_ts >= '2015-10-15'
and s1.paid_flag = 1 and s1.checkout_ts is not NULL and s1.items_sold<8 and s1.items_sold is not NULL
order by random()
limit 3000000"
## get business line
fixes <- sf_connect('redshift') %>% sf_query(query)
saveRDS(fixes, "/Users/kimlarsen/Code/analytics/analysis/client_dec_effect/fix_sample4.RDA")
library(dplyr)
library(ggplot2)
fixes <- readRDS("/Users/kimlarsen/Code/analytics/analysis/client_dec_effect/fix_sample4.RDA") %>%
filter(business_line=="Womens" & is.na(items_sold)==FALSE & is.na(algo_score)==FALSE) %>%
mutate(drop=ifelse(is.na(items_sold_lf) | fix_number==1 | is.na(kr_lt) |
truant_checkout_flag==1 | sf_waived==1 | sf_credit==1 | accidental_fix==1 |
lazy_checkout_flag==1, 1, 0),
d_no_ratings=ifelse(is.na(satisfied_score) | is.na(style_score | is.na(anticipating_next_fix)),
1, 0),
d_no_price_rating=ifelse(n_price_rating==0, 1, 0),
price_rating=ifelse(n_price_rating==0, 0, sum_price_just_right/n_price_rating),
buy0_lf=ifelse(items_sold_lf==0, 1, 0),
sf_credit_special=
ifelse(sf_credit==1 & date>=as.Date("2015-12-10") & date<=as.Date("2016-01-15"), 1, 0),
sf_credit_other=
ifelse(sf_credit==1 & sf_credit_special==0, 1, 0),
N=1) %>%
mutate(anticipating_next_fix=
ifelse(is.na(anticipating_next_fix),
0,
anticipating_next_fix),
style_score=
ifelse(is.na(style_score),
3,
style_score),
satisfied_score=
ifelse(is.na(satisfied_score),
3,
satisfied_score))
monthly <- group_by(fixes, calendar_month) %>%
summarise(drop=mean(drop),
sf_credit=mean(sf_credit),
sf_waived=mean(sf_waived),
sf_credit_special=mean(sf_credit_special),
accidental_fix=mean(accidental_fix),
items_sold=mean(items_sold),
exchanged_flag=mean(exchanged_flag),
sum_price_just_right=mean(sum_price_just_right),
N=sum(N))
ggplot(data=monthly, aes(factor(calendar_month), drop)) + geom_bar(stat="identity") +
ggtitle("Records dropped") + theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(data=monthly, aes(factor(calendar_month), sum_price_just_right)) + geom_bar(stat="identity") +
ggtitle("Price Just Right") + theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(data=monthly, aes(factor(calendar_month), accidental_fix)) + geom_bar(stat="identity") +
ggtitle("Accidental Fixes") + theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(data=monthly, aes(factor(calendar_month), sf_credit)) + geom_bar(stat="identity") +
ggtitle("SF Credit") + theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(data=monthly, aes(factor(calendar_month), sf_waived)) + geom_bar(stat="identity") +
ggtitle("SF Waived") + theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(data=monthly, aes(factor(calendar_month), sf_credit_special)) + geom_bar(stat="identity") +
ggtitle("SF Credit Special") + theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(data=monthly, aes(factor(calendar_month), items_sold)) + geom_bar(stat="identity") +
ggtitle("KR") + theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(data=monthly, aes(factor(calendar_month), exchanged_flag)) + geom_bar(stat="identity") +
ggtitle("Exhanges") + theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(data=monthly, aes(factor(calendar_month), N)) + geom_bar(stat="identity") +
ggtitle("Sample Size") + theme(axis.text.x = element_text(angle = 90, hjust = 1))
library(dplyr)
library(tidyr)
library(ggplot2)
library(scales)
tt <- filter(fixes, drop==0) %>% mutate(Y=items_sold)
f <- as.formula(Y ~  items_sold_lf + algo_score + exchanged_flag + kr_lt +
anticipating_next_fix + as.factor(style_score) + d_no_ratings +
as.factor(satisfied_score) + sum_price_just_right)
m <- lm(data=tt, f)
summary(m)
scores <- data.frame(merch_week=tt$merch_week,
calendar_month=tt$calendar_month,
Observed=tt$Y,
Expected=m$fitted.values,
residual=m$residuals,
month=as.factor(tt$month_of_fix)) %>%
arrange(merch_week) %>%
group_by(merch_week) %>%
summarise(Expected=mean(Expected), Observed=mean(Observed))
gather(scores, "metric", "value", 2:3) %>%
ggplot(aes(x=merch_week, y=value, color=metric)) + geom_line(size=1) +
ylab("KR") + xlab("Merch Week") + theme(legend.title = element_blank()) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
scale_x_date(breaks = pretty_breaks(20)) + ggtitle("Expected versus Actual (Fixes 2+)")
library(dplyr)
library(tidyr)
library(ggplot2)
library(scales)
tt <- filter(fixes, drop==0) %>% mutate(Y=items_sold)
f <- as.formula(Y ~  items_sold_lf + algo_score + exchanged_flag + kr_lt +
anticipating_next_fix + as.factor(style_score) + d_no_ratings +
as.factor(satisfied_score) + sum_price_just_right)
m <- lm(data=tt, f)
summary(m)
scores <- data.frame(merch_week=tt$merch_week,
calendar_month=tt$calendar_month,
Observed=tt$Y,
Expected=m$fitted.values,
residual=m$residuals,
month=as.factor(tt$month_of_fix)) %>%
arrange(merch_week) %>%
group_by(merch_week) %>%
summarise(Expected=mean(Expected), Observed=mean(Observed))
gather(scores, "metric", "value", 2:3) %>%
filter(merc_week<as.Date("2016-12-17")) %>%
ggplot(aes(x=merch_week, y=value, color=metric)) + geom_line(size=1) +
ylab("KR") + xlab("Merch Week") + theme(legend.title = element_blank()) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
scale_x_date(breaks = pretty_breaks(20)) + ggtitle("Expected versus Actual (Fixes 2+)")
gather(scores, "metric", "value", 2:3) %>%
filter(merch_week<as.Date("2016-12-17")) %>%
ggplot(aes(x=merch_week, y=value, color=metric)) + geom_line(size=1) +
ylab("KR") + xlab("Merch Week") + theme(legend.title = element_blank()) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
scale_x_date(breaks = pretty_breaks(20)) + ggtitle("Expected versus Actual (Fixes 2+)")
View(scores)
ggplot(data=monthly, aes(factor(calendar_month), items_sold)) + geom_bar(stat="identity") +
ggtitle("KR") + theme(axis.text.x = element_text(angle = 90, hjust = 1))
library(dplyr)
library(tidyr)
library(ggplot2)
library(scales)
ttt <- filter(fixes, fix_number==1) %>% mutate(Y=items_sold)
f <- as.formula(Y ~  algo_score + exchanged_flag + sf_credit + sf_waived + sf_credit_special +
d_no_ratings + anticipating_next_fix + as.factor(style_score) +
as.factor(satisfied_score) + sum_price_just_right)
mm <- lm(data=ttt, f)
summary(mm)
scores <- data.frame(merch_week=ttt$merch_week,
Observed=ttt$Y,
Expected=mm$fitted.values,
residual=mm$residuals,
month=as.factor(ttt$month_of_fix))
group_by(scores, merch_week) %>%
filter(merch_week < as.Date("2016-12-17")) %>%
summarise(Expected=mean(Expected), Observed=mean(Observed)) %>%
gather("metric", "value", 2:3) %>%
ggplot(aes(x=merch_week, y=value, color=metric)) + geom_line(size=1) +
ylab("KR") + xlab("Merch Week") + theme(legend.title = element_blank()) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
scale_x_date(breaks = pretty_breaks(20)) + ggtitle("Expected versus Actual -- First Fixes")
