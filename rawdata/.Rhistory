filter(business_line=="Womens") %>%
mutate(drop=ifelse(is.na(items_sold_lf) | is.na(algo_score) | fix_number==1, 1, 0),
d_anticipating_next_fix=ifelse(is.na(anticipating_next_fix), 1, 0))
summary(fixes)
fixes <- readRDS("/Users/kimlarsen/Code/analytics/analysis/client_dec_effect/fix_sample.RDA") %>%
filter(business_line=="Womens") %>%
mutate(drop=ifelse(is.na(items_sold_lf) | is.na(algo_score) | fix_number==1, 1, 0),
d_no_checkout=ifelse(is.na(anticipating_next_fix) | is.na(satisfied_score), 1, 0),
d_no_style_score=ifelse(is.na(style_score), 1, 0))
summary(fixes)
library(dplyr)
library(ggplot2)
fixes <- readRDS("/Users/kimlarsen/Code/analytics/analysis/client_dec_effect/fix_sample.RDA") %>%
filter(business_line=="Womens") %>%
mutate(drop=ifelse(is.na(items_sold_lf) | is.na(algo_score) | fix_number==1, 1, 0),
d_no_checkout=ifelse(is.na(anticipating_next_fix) | is.na(satisfied_score), 1, 0),
d_no_style_score=ifelse(is.na(style_score), 1, 0)) %>%
mutate(anticipating_next_fix=
ifelse(is.na(anticipating_next_fix), mean(anticipating_next_fix, rm.na=T), anticipating_next_fix))
summary(fixes)
library(dplyr)
library(ggplot2)
fixes <- readRDS("/Users/kimlarsen/Code/analytics/analysis/client_dec_effect/fix_sample.RDA") %>%
filter(business_line=="Womens") %>%
mutate(drop=ifelse(is.na(items_sold_lf) | is.na(algo_score) | fix_number==1, 1, 0),
d_no_checkout=ifelse(is.na(anticipating_next_fix) | is.na(satisfied_score), 1, 0),
d_no_style_score=ifelse(is.na(style_score), 1, 0)) %>%
mutate(anticipating_next_fix=
ifelse(is.na(anticipating_next_fix), mean(anticipating_next_fix, rm.na=T), anticipating_next_fix))
summary(fixes)
mean(cars$speed, rm.na=T)
mean(cars$speed, na.rm=T)
library(dplyr)
library(ggplot2)
fixes <- readRDS("/Users/kimlarsen/Code/analytics/analysis/client_dec_effect/fix_sample.RDA") %>%
filter(business_line=="Womens") %>%
mutate(drop=ifelse(is.na(items_sold_lf) | is.na(algo_score) | fix_number==1, 1, 0),
d_no_checkout=ifelse(is.na(anticipating_next_fix) | is.na(satisfied_score), 1, 0),
d_no_style_score=ifelse(is.na(style_score), 1, 0)) %>%
mutate(anticipating_next_fix=
ifelse(is.na(anticipating_next_fix),
mean(anticipating_next_fix, na.rm=TRUE),
anticipating_next_fix))
summary(fixes)
ggplot(data=fixes, aes(factor(month_of_fix), drop)) + geom_bar(stat="summary", fun.y="mean") +
ggtitle("Records dropped")
ggplot(data=fixes, aes(factor(month_of_fix), no_sf)) + geom_bar(stat="summary", fun.y="mean") +
ggtitle("Paid no styling fee")
ggplot(data=fixes, aes(factor(month_of_fix), items_sold)) + geom_bar(stat="summary", fun.y="mean") +
ggtitle("Items sold")
ggplot(data=fixes, aes(factor(month_of_fix), exchanged_flag)) + geom_bar(stat="summary", fun.y="mean") +
ggtitle("Exchanges")
m <- lm(data=subset(fixes, drop==0),
items_sold ~ items_sold_lf + algo_score + fixes_lt + exchanged_flag + no_sf + kr_lt +
d_no_checkout + anticipating_next_fix + )
m <- lm(data=subset(fixes, drop==0),
items_sold ~ items_sold_lf + algo_score + fixes_lt + exchanged_flag + no_sf + kr_lt +
d_no_checkout + anticipating_next_fix)
summary(m)
m <- lm(data=subset(fixes, drop==0),
items_sold ~ items_sold_lf + algo_score + fixes_lt + exchanged_flag + no_sf + kr_lt +
anticipating_next_fix)
summary(m)
m <- lm(data=subset(fixes, drop==0),
items_sold ~ items_sold_lf + algo_score + fixes_lt + exchanged_flag + no_sf + kr_lt)
summary(m)
m <- lm(data=subset(fixes, drop==0 & no_sf==0),
items_sold ~ items_sold_lf + algo_score + fixes_lt + exchanged_flag + no_sf + kr_lt +
d_no_checkout + anticipating_next_fix)
summary(m)
Y <- fixes$items_sold
X <- model.matrix(as.formula(Y ~ items_sold_lf + algo_score + fixes_lt + exchanged_flag + no_sf + kr_lt +
d_no_checkout + anticipating_next_fix), fixes)
model <- cv.glmnet(y=Y, x=X, alpha=alpha, parallel=FALSE, nfolds=10, family="gaussian")
Y <- fixes$items_sold
X <- model.matrix(as.formula(Y ~ items_sold_lf + algo_score + fixes_lt + exchanged_flag + no_sf + kr_lt +
d_no_checkout + anticipating_next_fix), fixes)
model <- cv.glmnet(y=Y, x=X, alpha=1, parallel=FALSE, nfolds=10, family="gaussian")
tt <- filter(fixes, drop==0)
Y <- tt$items_sold
X <- model.matrix(as.formula(Y ~ items_sold_lf + algo_score + fixes_lt + exchanged_flag + no_sf + kr_lt +
d_no_checkout + anticipating_next_fix), tt)
model <- cv.glmnet(y=Y, x=X, alpha=0, parallel=FALSE, nfolds=10, family="gaussian")
summary(tt)
library(dplyr)
library(ggplot2)
fixes <- readRDS("/Users/kimlarsen/Code/analytics/analysis/client_dec_effect/fix_sample.RDA") %>%
filter(business_line=="Womens") %>%
mutate(drop=ifelse(is.na(items_sold_lf) | is.na(algo_score) | fix_number==1 | is.na(kr_lt), 1, 0),
d_no_checkout=ifelse(is.na(anticipating_next_fix) | is.na(satisfied_score), 1, 0),
d_no_style_score=ifelse(is.na(style_score), 1, 0)) %>%
mutate(anticipating_next_fix=
ifelse(is.na(anticipating_next_fix),
mean(anticipating_next_fix, na.rm=TRUE),
anticipating_next_fix),
style_score=
ifelse(is.na(style_score),
mean(style_score, na.rm=TRUE),
style_score))
tt <- filter(fixes, drop==0)
summary(tt)
Y <- tt$items_sold
X <- model.matrix(as.formula(Y ~ items_sold_lf + algo_score + fixes_lt + exchanged_flag + no_sf + kr_lt +
d_no_checkout + anticipating_next_fix), tt)
model <- cv.glmnet(y=Y, x=X, alpha=0, parallel=FALSE, nfolds=10, family="gaussian")
c <- as.matrix(coef(model, s=model$lambda.1se))
c
library(dplyr)
library(ggplot2)
tt <- filter(fixes, drop==0) %>% mutate(Y=items_sold)
f <- as.formula(Y ~ items_sold_lf + algo_score + fixes_lt + exchanged_flag + no_sf + kr_lt +
d_no_checkout + anticipating_next_fix)
m <- lm(data=tt, f)
X <- model.matrix(f, tt)
model <- cv.glmnet(y=Y, x=X, alpha=0, parallel=FALSE, nfolds=10, family="gaussian")
c <- as.matrix(coef(model, s=model$lambda.1se))
c
library(dplyr)
library(ggplot2)
tt <- filter(fixes, drop==0) %>% mutate(Y=items_sold)
f <- as.formula(Y ~ items_sold_lf + algo_score + fixes_lt + exchanged_flag + no_sf + kr_lt +
d_no_checkout + anticipating_next_fix + style_score + d_no_style_score)
m <- lm(data=tt, f)
m <- lm(data=tt, f)
summary(m)
Y <- tt$Y
X <- model.matrix(f, tt)
model <- cv.glmnet(y=Y, x=X, alpha=0, parallel=FALSE, nfolds=10, family="gaussian")
c <- as.matrix(coef(model, s=model$lambda.1se))
c
Y <- tt$Y
X <- model.matrix(f, tt)
model <- cv.glmnet(y=Y, x=X, alpha=1, parallel=FALSE, nfolds=10, family="gaussian")
c <- as.matrix(coef(model, s=model$lambda.1se))
c
model <- cv.glmnet(y=Y, x=X, parallel=FALSE, nfolds=10, family="gaussian")
c <- as.matrix(coef(model, s=model$lambda.1se))
c
model <- cv.glmnet(y=Y, x=X, alpha=0, parallel=FALSE, nfolds=10, family="gaussian")
c <- as.matrix(coef(model, s=model$lambda.1se))
c
scores <- data.frame(yhat=X%*%c[-1], month=as.factor(month_of_fix))
scores <- data.frame(yhat=X%*%c[-1], month=as.factor(tt$month_of_fix))
yhat <- X%*%c[-1]
r <- tt$items_sold-yhat
scores <- data.frame(yhat, r, month=as.factor(tt$month_of_fix))
yhat <- X%*%c[-1]
r <- tt$items_sold-yhat
scores <- data.frame(yhat, r, month=as.factor(tt$month_of_fix))
ggplot(data=scores, aes(month, r)) + geom_bar(stat="summary", fun.y="mean") +
ggtitle("Residual by month")
mean(yhat)
mean(tt$items_sold)
yhat <- X%*%c
yhat <- X%*%c[-1]
yhat <- X%*%c[-2]
mean(yhat)
yhat <- X%*%c[-2]
r <- tt$items_sold-yhat
scores <- data.frame(yhat, r, month=as.factor(tt$month_of_fix))
ggplot(data=scores, aes(month, r)) + geom_bar(stat="summary", fun.y="mean") +
ggtitle("Residual by month")
c
2.1-0.05
f <- as.formula(Y ~ items_sold_lf + algo_score + fixes_lt + exchanged_flag + no_sf + kr_lt +
d_no_checkout + as.factor(anticipating_next_fix) + style_score + d_no_style_score)
Y <- tt$Y
X <- model.matrix(f, tt)
model <- cv.glmnet(y=Y, x=X, alpha=0, parallel=FALSE, nfolds=10, family="gaussian")
c <- as.matrix(coef(model, s=model$lambda.1se))
c
yhat <- X%*%c[-2]
r <- tt$items_sold-yhat
scores <- data.frame(yhat, r, month=as.factor(tt$month_of_fix))
ggplot(data=scores, aes(month, r)) + geom_bar(stat="summary", fun.y="mean") +
ggtitle("Residual by month")
c
library(dplyr)
library(ggplot2)
fixes <- readRDS("/Users/kimlarsen/Code/analytics/analysis/client_dec_effect/fix_sample.RDA") %>%
filter(business_line=="Womens") %>%
mutate(drop=ifelse(is.na(items_sold_lf) | is.na(algo_score) | fix_number==1 | is.na(kr_lt), 1, 0),
d_no_checkout=ifelse(is.na(anticipating_next_fix) | is.na(satisfied_score), 1, 0),
d_no_style_score=ifelse(is.na(style_score), 1, 0))
mean(fixes$satisfied_score)
mean(fixes$satisfied_score, na.rm)
mean(fixes$satisfied_score, rm.na)
mean(fixes$satisfied_score, rm.na=T)
mean(fixes$satisfied_score, rm.na=TRUE)
mean(fixes$satisfied_score, na.rm=TRUE)
mean(fixes$style_score, na.rm=TRUE)
library(dplyr)
library(ggplot2)
fixes <- readRDS("/Users/kimlarsen/Code/analytics/analysis/client_dec_effect/fix_sample.RDA") %>%
filter(business_line=="Womens") %>%
mutate(drop=ifelse(is.na(items_sold_lf) | is.na(algo_score) | fix_number==1 | is.na(kr_lt), 1, 0),
d_no_checkout=ifelse(is.na(anticipating_next_fix) | is.na(satisfied_score), 1, 0),
d_no_style_score=ifelse(is.na(style_score), 1, 0)) %>%
mutate(anticipating_next_fix=
ifelse(is.na(anticipating_next_fix),
0,
anticipating_next_fix),
style_score=
ifelse(is.na(style_score),
3,
style_score),
satisfied_score=
ifelse(is.na(satisfied_score),
3,
satisfied_score))
summary(fixes)
library(dplyr)
library(ggplot2)
fixes <- readRDS("/Users/kimlarsen/Code/analytics/analysis/client_dec_effect/fix_sample.RDA") %>%
filter(business_line=="Womens" & is.na(items_sold)==FALSE & is.na(algo_score)==FALSE) %>%
mutate(drop=ifelse(is.na(items_sold_lf) | fix_number==1 | is.na(kr_lt), 1, 0),
d_no_checkout=ifelse(is.na(anticipating_next_fix) | is.na(satisfied_score), 1, 0),
d_no_style_score=ifelse(is.na(style_score), 1, 0)) %>%
mutate(anticipating_next_fix=
ifelse(is.na(anticipating_next_fix),
0,
anticipating_next_fix),
style_score=
ifelse(is.na(style_score),
3,
style_score),
satisfied_score=
ifelse(is.na(satisfied_score),
3,
satisfied_score))
summary(fixes)
tt <- filter(fixes, drop==0) %>% mutate(Y=items_sold)
f <- as.formula(Y ~ items_sold_lf + algo_score + fixes_lt + exchanged_flag + no_sf + kr_lt +
d_no_checkout + anticipating_next_fix + as.factor(style_score) + d_no_style_score +
as.factor(satisfied_score))
m <- lm(data=tt, f)
summary(m)
summary(m)
library(dplyr)
library(ggplot2)
tt <- filter(fixes, drop==0) %>% mutate(Y=items_sold)
f <- as.formula(Y ~ items_sold_lf + algo_score + fixes_lt + exchanged_flag + no_sf + kr_lt +
d_no_checkout + anticipating_next_fix + as.factor(style_score) + d_no_style_score +
as.factor(satisfied_score))
m <- lm(data=tt, f)
summary(m)
scores <- data.frame(yhat=m$fitted.values, r=m$residuals, month=as.factor(tt$month_of_fix))
ggplot(data=scores, aes(month, r)) + geom_bar(stat="summary", fun.y="mean") +
ggtitle("Residual by month -- OLS model")
summary(m)
library(xlsx)
library(dplyr)
library(readxl)
library(stringi)
library(tidyr)
library(reshape2)
library(data.table)
library(dplyr)
library(ggmap)
library(parallel)
library(foreach)
library(doParallel)
library(rvest)
library(stringr)
source("/Users/kimlarsen/Documents/Code/NBA_RANKINGS/functions/distance_between.R")
setwd("/Users/kimlarsen/Documents/Code/NBA_RANKINGS/rawdata/")
team_map <- data.frame(read_excel("schedule.xlsx", sheet=2)) %>%
distinct(Team, .keep_all=TRUE) %>% select(City, NBAstuffer.Initials, Team) %>%
filter(!(Team %in% c("Charlotte Bobcats", "New Orleans Hornets")))
### 538 data
ft8 <- read_html("http://projects.fivethirtyeight.com/2017-nba-predictions/")
team <- ft8 %>% html_nodes("tbody tr td.team a") %>% html_text() %>% gsub("[0-9, -]", "", .)
wins <- ft8 %>% html_nodes("tbody tr td.proj-rec") %>% html_text() %>% gsub('-[0-9]+','', .)
losses <- ft8 %>% html_nodes("tbody tr td.proj-rec") %>% html_text() %>% gsub('[0-9]+-','', .)
elo <- ft8 %>% html_nodes("tbody tr td.elo.original") %>% html_text()
carm_elo <- ft8 %>% html_nodes("tbody tr td.carmelo") %>% html_text()
team[team=="ers"] <- "Philadelphia"
team[team=="Hornets"] <- "Charlotte"
team[team=="Clippers"] <- "LA Clippers"
team[team=="Cavaliers"] <- "Cleveland"
team[team=="Warriors"] <- "Golden State"
team[team=="Spurs"] <- "San Antonio"
team[team=="Raptors"] <- "Toronto"
team[team=="Jazz"] <- "Utah"
team[team=="Thunder"] <- "Oklahoma City"
team[team=="TrailBlazers"] <- "Portland"
team[team=="Rockets"] <- "Houston"
team[team=="Pelicans"] <- "New Orleans"
team[team=="Celtics"] <- "Boston"
team[team=="Timberwolves"] <- "Minnesota"
team[team=="Bulls"] <- "Chicago"
team[team=="Hawks"] <- "Atlanta"
team[team=="Pistons"] <- "Detroit"
team[team=="Nuggets"] <- "Denver"
team[team=="Mavericks"] <- "Dallas"
team[team=="Wizards"] <- "Washington"
team[team=="Lakers"] <- "LA Lakers"
team[team=="Kings"] <- "Sacramento"
team[team=="Knicks"] <- "New York"
team[team=="Grizzlies"] <- "Memphis"
team[team=="Pacers"] <- "Indiana"
team[team=="Bucks"] <- "Milwaukee"
team[team=="Magic"] <- "Orlando"
team[team=="Heat"] <- "Miami"
team[team=="Suns"] <- "Phoenix"
team[team=="Nets"] <- "Brooklyn"
fivethirtyeight <- data.frame(team, elo=as.numeric(elo),
carm_elo=as.numeric(carm_elo),
wins_538=as.numeric(wins),
losses_538=as.numeric(losses),
stringsAsFactors = FALSE) %>%
mutate(selected_team=as.character(team), opposing_team=as.character(team),
elo=elo, carm_elo=carm_elo,
pred_win_rate_538=wins_538/(wins_538+losses_538)) %>%
select(-team)
### Injury return dates from CBS
cbs_injuries <- read_html("http://www.cbssports.com/nba/injuries/daily")
PLAYER_FULL_NAME <- cbs_injuries %>% html_nodes("tr.row1 td:nth-child(3), tr.row2 td:nth-child(3)") %>% html_text()
return_notes <- cbs_injuries %>% html_nodes("tr.row1 td:nth-child(6), tr.row2 td:nth-child(6)") %>% html_text()
daily_injuries <- data.frame(PLAYER_FULL_NAME,
return_notes,
stringsAsFactors = FALSE) %>%
mutate(clean_note=gsub("Expected to be out until at least ", "", return_notes))
convert_to_date <- function(data){
if (data$clean_note=="Game Time Decision"){
data$return_date <- Sys.Date() + 1
} else if (data$clean_note=="Out for the season"){
data$return_date <- as.Date("2017-10-25")
} else{
data$return_date <- as.Date(data$clean_note, format="%b %d")
}
if (data$return_date<Sys.Date()){
data$return_date <- data$return_date + 365
}
return(data)
}
daily_injuries <- data.frame(rbindlist(lapply(split(daily_injuries, daily_injuries$PLAYER_FULL_NAME), convert_to_date)), stringsAsFactors = FALSE) %>%
select(PLAYER_FULL_NAME, return_date) %>% distinct(PLAYER_FULL_NAME, .keep_all=TRUE)
### Injury status from ESPN
source_injuries <- read_html("http://espn.go.com/nba/injuries")
players <- source_injuries %>%
html_nodes('table tr.oddrow a, table tr.evenrow a') %>%
html_text()
statuses <- source_injuries %>%
html_nodes('table tr.oddrow td:nth-child(2), table tr.evenrow  td:nth-child(2)') %>%
html_text()
dates <- source_injuries %>%
html_nodes('table tr.oddrow td:nth-child(3), table tr.evenrow  td:nth-child(3)') %>%
html_text()
injuries <- data.frame(
PLAYER_FULL_NAME = players,
injury_status = statuses,
injury_date = dates,
stringsAsFactors = FALSE
) %>% arrange(PLAYER_FULL_NAME, desc(injury_date)) %>%
distinct(PLAYER_FULL_NAME, .keep_all=TRUE) %>%
left_join(daily_injuries, by="PLAYER_FULL_NAME") %>%
distinct(PLAYER_FULL_NAME, .keep_all=TRUE) %>%
mutate(injury_scrape_date=Sys.Date())
injuries[is.na(injuries$return_date),"return_date"] <- Sys.Date()+1
### Get the current rosters
team_pages <- read_html("http://www.espn.com/nba/teams") %>%
html_nodes("ul.medium-logos span a:nth-child(3)") %>% html_attr("href")
rosters <- lapply(team_pages, function (team_link) {
team_link <- paste0('http://www.espn.com', team_link)
team_roster <- read_html(team_link)
team_name <- team_roster %>% html_nodes("h2.logo b") %>% html_text()
team_name[team_name=="LA Clippers"] <- "Los Angeles Clippers"
team_name[team_name=="Portland Trail Blazers"] <- "Portland Trailblazers"
data <- sapply(1:8, function(col) {
team_roster %>% html_nodes(paste0("tr.evenrow > td:nth-child(",col,"), tr.oddrow > td:nth-child(",col,")")) %>% html_text()
})
data <- data.frame(data, stringsAsFactors = FALSE)
colnames(data) <- c('Number','PLAYER_FULL_NAME','Position','Age','Height','Weight','College','Salary')
data$Team <- team_name
data$Age <- as.numeric(data$Age)
data$Weight <- as.numeric(data$Weight)
data$Salary <- as.numeric(gsub(',','',gsub('\\$', '', data$Salary)))
data
})
library(xlsx)
library(dplyr)
library(readxl)
library(stringi)
library(tidyr)
library(reshape2)
library(data.table)
library(dplyr)
library(ggmap)
library(parallel)
library(foreach)
library(doParallel)
library(rvest)
library(stringr)
source("/Users/kimlarsen/Documents/Code/NBA_RANKINGS/functions/distance_between.R")
setwd("/Users/kimlarsen/Documents/Code/NBA_RANKINGS/rawdata/")
team_map <- data.frame(read_excel("schedule.xlsx", sheet=2)) %>%
distinct(Team, .keep_all=TRUE) %>% select(City, NBAstuffer.Initials, Team) %>%
filter(!(Team %in% c("Charlotte Bobcats", "New Orleans Hornets")))
### 538 data
ft8 <- read_html("http://projects.fivethirtyeight.com/2017-nba-predictions/")
team <- ft8 %>% html_nodes("tbody tr td.team a") %>% html_text() %>% gsub("[0-9, -]", "", .)
wins <- ft8 %>% html_nodes("tbody tr td.proj-rec") %>% html_text() %>% gsub('-[0-9]+','', .)
losses <- ft8 %>% html_nodes("tbody tr td.proj-rec") %>% html_text() %>% gsub('[0-9]+-','', .)
elo <- ft8 %>% html_nodes("tbody tr td.elo.original") %>% html_text()
carm_elo <- ft8 %>% html_nodes("tbody tr td.carmelo") %>% html_text()
team[team=="ers"] <- "Philadelphia"
team[team=="Hornets"] <- "Charlotte"
team[team=="Clippers"] <- "LA Clippers"
team[team=="Cavaliers"] <- "Cleveland"
team[team=="Warriors"] <- "Golden State"
team[team=="Spurs"] <- "San Antonio"
team[team=="Raptors"] <- "Toronto"
team[team=="Jazz"] <- "Utah"
team[team=="Thunder"] <- "Oklahoma City"
team[team=="TrailBlazers"] <- "Portland"
team[team=="Rockets"] <- "Houston"
team[team=="Pelicans"] <- "New Orleans"
team[team=="Celtics"] <- "Boston"
team[team=="Timberwolves"] <- "Minnesota"
team[team=="Bulls"] <- "Chicago"
team[team=="Hawks"] <- "Atlanta"
team[team=="Pistons"] <- "Detroit"
team[team=="Nuggets"] <- "Denver"
team[team=="Mavericks"] <- "Dallas"
team[team=="Wizards"] <- "Washington"
team[team=="Lakers"] <- "LA Lakers"
team[team=="Kings"] <- "Sacramento"
team[team=="Knicks"] <- "New York"
team[team=="Grizzlies"] <- "Memphis"
team[team=="Pacers"] <- "Indiana"
team[team=="Bucks"] <- "Milwaukee"
team[team=="Magic"] <- "Orlando"
team[team=="Heat"] <- "Miami"
team[team=="Suns"] <- "Phoenix"
team[team=="Nets"] <- "Brooklyn"
fivethirtyeight <- data.frame(team, elo=as.numeric(elo),
carm_elo=as.numeric(carm_elo),
wins_538=as.numeric(wins),
losses_538=as.numeric(losses),
stringsAsFactors = FALSE) %>%
mutate(selected_team=as.character(team), opposing_team=as.character(team),
elo=elo, carm_elo=carm_elo,
pred_win_rate_538=wins_538/(wins_538+losses_538)) %>%
select(-team)
library(xlsx)
library(dplyr)
library(readxl)
library(stringi)
library(tidyr)
library(reshape2)
library(data.table)
library(dplyr)
library(ggmap)
library(parallel)
library(foreach)
library(doParallel)
library(rvest)
library(stringr)
source("/Users/kimlarsen/Documents/Code/NBA_RANKINGS/functions/distance_between.R")
setwd("/Users/kimlarsen/Documents/Code/NBA_RANKINGS/rawdata/")
team_map <- data.frame(read_excel("schedule.xlsx", sheet=2)) %>%
distinct(Team, .keep_all=TRUE) %>% select(City, NBAstuffer.Initials, Team) %>%
filter(!(Team %in% c("Charlotte Bobcats", "New Orleans Hornets")))
### 538 data
ft8 <- read_html("http://projects.fivethirtyeight.com/2017-nba-predictions/")
team <- ft8 %>% html_nodes("tbody tr td.team a") %>% html_text() %>% gsub("[0-9, -]", "", .)
wins <- ft8 %>% html_nodes("tbody tr td.proj-rec") %>% html_text() %>% gsub('-[0-9]+','', .)
losses <- ft8 %>% html_nodes("tbody tr td.proj-rec") %>% html_text() %>% gsub('[0-9]+-','', .)
elo <- ft8 %>% html_nodes("tbody tr td.elo.original") %>% html_text()
carm_elo <- ft8 %>% html_nodes("tbody tr td.carmelo") %>% html_text()
team[team=="ers"] <- "Philadelphia"
team[team=="Hornets"] <- "Charlotte"
team[team=="Clippers"] <- "LA Clippers"
team[team=="Cavaliers"] <- "Cleveland"
team[team=="Warriors"] <- "Golden State"
team[team=="Spurs"] <- "San Antonio"
team[team=="Raptors"] <- "Toronto"
team[team=="Jazz"] <- "Utah"
team[team=="Thunder"] <- "Oklahoma City"
team[team=="TrailBlazers"] <- "Portland"
team[team=="Rockets"] <- "Houston"
team[team=="Pelicans"] <- "New Orleans"
team[team=="Celtics"] <- "Boston"
team[team=="Timberwolves"] <- "Minnesota"
team[team=="Bulls"] <- "Chicago"
team[team=="Hawks"] <- "Atlanta"
team[team=="Pistons"] <- "Detroit"
team[team=="Nuggets"] <- "Denver"
team[team=="Mavericks"] <- "Dallas"
team[team=="Wizards"] <- "Washington"
team[team=="Lakers"] <- "LA Lakers"
team[team=="Kings"] <- "Sacramento"
team[team=="Knicks"] <- "New York"
team[team=="Grizzlies"] <- "Memphis"
team[team=="Pacers"] <- "Indiana"
team[team=="Bucks"] <- "Milwaukee"
team[team=="Magic"] <- "Orlando"
team[team=="Heat"] <- "Miami"
team[team=="Suns"] <- "Phoenix"
team[team=="Nets"] <- "Brooklyn"
fivethirtyeight <- data.frame(team, elo=as.numeric(elo),
carm_elo=as.numeric(carm_elo),
wins_538=as.numeric(wins),
losses_538=as.numeric(losses),
stringsAsFactors = FALSE) %>%
mutate(selected_team=as.character(team), opposing_team=as.character(team),
elo=elo, carm_elo=carm_elo,
pred_win_rate_538=wins_538/(wins_538+losses_538)) %>%
select(-team)
### Injury return dates from CBS
cbs_injuries <- read_html("http://www.cbssports.com/nba/injuries/daily")
