rename(OWN_TEAM=City) %>%
select(PLAYER_FULL_NAME, OWN_TEAM, Position, Age, Height, Weight, Salary, Team) %>%
arrange(PLAYER_FULL_NAME, OWN_TEAM) %>%
left_join(injuries, by="PLAYER_FULL_NAME") %>%
distinct(PLAYER_FULL_NAME, .keep_all=TRUE)
## Save scraped data
write.csv(all_rosters, "rosters_current.csv", row.names = FALSE)
write.csv(all_rosters, paste0("rosters_", Sys.Date(), ".csv"), row.names = FALSE)
write.csv(fivethirtyeight, paste0("FiveThirtyEight_", Sys.Date(), ".csv"), row.names = FALSE)
write.csv(fivethirtyeight, paste0("FiveThirtyEight_current.csv"), row.names = FALSE)
write.csv(injuries, paste0("injuries_", Sys.Date(), ".csv"), row.names = FALSE)
write.csv(injuries, "injuries_current.csv", row.names = FALSE)
## Register cores
ncore <- detectCores()-2
registerDoParallel(ncore)
## Read the raw data
read_player_data <- function(season, first_labels, suffix){
data <- data.frame(read_excel(paste0("s", suffix, ".xlsx"), sheet=1))
meta <- data.frame(read_excel(paste0("s", suffix, ".xlsx"), sheet=2, col_names = FALSE))
labels <- c(first_labels, meta$X1)
attr(data, "variable.labels") <- labels
n <- gsub("_$", "", gsub("__", "_", gsub(".", "_", names(data), fixed=T)))
names(data) <- n
data <- rename(data,
points=PTS,
assists=A,
offensive_rebounds=OR,
defensive_rebounds=DR,
turnovers=TO,
threepointers_made=X3P,
steals=ST,
minutes=MIN,
threepoint_attempts=X3PA,
fieldgoal_attempts=FGA,
fieldgoals_made=FG,
freethrows_made=FT,
freethrow_attempts=FTA,
fouls=PF,
blocks=BL)
return(data)
}
s1 <- read_player_data("NBA-2012-2013", c("SEASON", "DATE", "PLAYER FULL NAME", "POSITION"), 1)
s2 <- read_player_data("NBA-2013-2014", c("SEASON", "DATE", "PLAYER FULL NAME", "POSITION"), 2)
s3 <- read_player_data("NBA-2014-2015", c("SEASON", "DATE", "PLAYER FULL NAME", "POSITION"), 3)
s4 <- read_player_data("NBA-2015-2016", c("SEASON", "DATE", "PLAYER FULL NAME", "POSITION"), 4)
s5 <- read_player_data("NBA-2016-2017", c("SEASON", "DATE", "PLAYER FULL NAME", "POSITION"), 5)
## Add some indicators
f <- rbind.data.frame(s1, s2, s3, s4, s5) %>%
filter(is.na(DATA_SET)==FALSE) %>%
mutate(home_team=as.numeric(VENUE_R_H=='H'),
road_team=as.numeric(VENUE_R_H=='R'),
playoffs=as.numeric(substr(DATA_SET, 6, 13)=="Playoffs"),
season=ifelse(playoffs==0, as.numeric(substr(DATA_SET, 1, 4)), as.numeric(substr(DATA_SET, 1, 4))-1),
playoff_minutes=playoffs*minutes,
playoff_points=playoffs*points,
DATE=as.Date(DATE, format="%m/%d/%Y"),
quarter=quarter(DATE),
future_game=0,
OWN_TEAM=ifelse(OWN_TEAM=="LA", "LA Clippers", OWN_TEAM),
OPP_TEAM=ifelse(OPP_TEAM=="LA", "LA Clippers", OPP_TEAM))
max_date <- max(f$DATE)
## Get the altitudes
altitudes <- data.frame(read.csv("altitudes.csv", stringsAsFactors = FALSE))
## Read the schedule
schedule <- data.frame(read_excel("schedule.xlsx", sheet=1))
home <- rename(schedule, NBAstuffer.Initials=HOME) %>%
inner_join(team_map, by="NBAstuffer.Initials") %>%
rename(home_team=City) %>%
mutate(DATE=as.Date(Date, format="%m/%d/%Y")) %>%
select(home_team)
road <- rename(schedule, NBAstuffer.Initials=ROAD) %>%
inner_join(team_map, by="NBAstuffer.Initials") %>%
rename(road_team=City) %>%
mutate(DATE=as.Date(Date, format="%m/%d/%Y")) %>%
select(road_team, DATE)
set.seed(2015)
future_schedule <- data.frame(cbind(home, road)) %>% filter(DATE>max_date) %>%
mutate(r=runif(n()),
future_game=1,
OWN_TEAM=ifelse(r>0.5, home_team, road_team),
OPP_TEAM=ifelse(OWN_TEAM==home_team, road_team, home_team),
VENUE_R_H=ifelse(OWN_TEAM==home_team, 'H', 'R'),
DATA_SET="2016-2017 Regular Season",
season=2016,
PLAYER_FULL_NAME="BLANK") %>%
select(DATE, OWN_TEAM, OPP_TEAM, VENUE_R_H, DATA_SET, future_game, PLAYER_FULL_NAME, season)
f <- bind_rows(f, future_schedule) %>%
replace(is.na(.), 0)
setwd("/Users/kimlarsen/Documents/Code/NBA_RANKINGS/cleandata")
## Create an ID
f$cat <- paste0(f$OWN_TEAM, f$OPP_TEAM)
striHelper <- function(x) stri_c(x[stri_order(x)], collapse = "")
f$game_id <- paste0(f$DATE, vapply(stri_split_boundaries(f$cat, type = "character"), striHelper, ""))
f$cat <- NULL
## Team/game level points
team_pts <- group_by(f, game_id, OWN_TEAM, OPP_TEAM, VENUE_R_H, DATE, future_game, season) %>%
summarise(total_playoff_minutes=sum(minutes*playoffs),
total_playoff_points=sum(points*playoffs),
total_minutes=sum(minutes),
total_points=sum(points),
playoffs=max(playoffs)) %>%
ungroup()
## Game level points
game_pts <- group_by(team_pts, game_id, future_game, season) %>%
mutate(home_team_points=total_points*(VENUE_R_H=='H'),
road_team_points=total_points*(VENUE_R_H=='R')) %>%
summarise(max_game_points=max(total_points),
home_team_points=sum(home_team_points),
road_team_points=sum(road_team_points)) %>%
ungroup()
## Random indicator to choose the selected team
game_pts$r <- as.numeric(rbinom(nrow(game_pts), 1, 0.5)>0.5)
## Create win indicators at the game/team level
team_win <- inner_join(team_pts, select(game_pts, game_id, max_game_points, r), by="game_id") %>%
mutate(win=as.numeric(total_points==max_game_points)) %>%
select(-max_game_points)
city_names <- distinct(team_win, OWN_TEAM) %>% mutate(OWN_TEAM_NAME=OWN_TEAM) %>%
mutate(OWN_TEAM_NAME=ifelse(OWN_TEAM_NAME=="Golden State", "Oakland", OWN_TEAM_NAME),
OWN_TEAM_NAME=ifelse(OWN_TEAM_NAME=="Minnesota", "Minneapolis", OWN_TEAM_NAME),
OWN_TEAM_NAME=ifelse(OWN_TEAM_NAME=="LA Clippers", "Los Angeles", OWN_TEAM_NAME),
OWN_TEAM_NAME=ifelse(OWN_TEAM_NAME=="Indiana", "Indianapolis", OWN_TEAM_NAME),
OWN_TEAM_NAME=ifelse(OWN_TEAM_NAME=="LA Lakers", "Los Angeles", OWN_TEAM_NAME),
OWN_TEAM_NAME=ifelse(OWN_TEAM_NAME=="Washington", "Washington, DC", OWN_TEAM_NAME),
OWN_TEAM_NAME=ifelse(OWN_TEAM_NAME=="Utah", "Salt Lake City", OWN_TEAM_NAME)) %>%
arrange(OWN_TEAM_NAME)
city_lat_long <- cbind(rbindlist(lapply(split(city_names$OWN_TEAM_NAME, city_names$OWN_TEAM_NAME), function(x) return(geocode(as.character(x))))), city_names$OWN_TEAM)
names(city_lat_long) <- c("lon","lat","OWN_TEAM")
## Create win indicators at the game level
game_win <- group_by(team_win, game_id, DATE, future_game, season) %>%
mutate(selected_team_win=ifelse(r==1, win*(VENUE_R_H=='H'), win*(VENUE_R_H=='R'))) %>%
summarise(selected_team_win=max(selected_team_win),
playoffs=max(playoffs)) %>%
ungroup()
## Create a game level summary file to be saved
future_flipped <- filter(team_win, future_game==1) %>%
mutate(VENUE_R_H2=ifelse(VENUE_R_H=='H', 'R', 'H'),
OWN_TEAM2=OPP_TEAM,
OPP_TEAM2=OWN_TEAM) %>%
select(-OPP_TEAM, -OWN_TEAM) %>%
rename(OPP_TEAM=OPP_TEAM2,
OWN_TEAM=OWN_TEAM2,
VENUE_R_H=VENUE_R_H2)
team_win <- bind_rows(team_win, future_flipped) %>% arrange(DATE, game_id)
split <- split(team_win, team_win$game_id)
game_scores <- data.frame(rbindlist(lapply(split, function(x) spread(select(x, game_id, VENUE_R_H, OWN_TEAM), VENUE_R_H, OWN_TEAM))), stringsAsFactors = FALSE) %>%
inner_join(select(game_pts, -max_game_points, -future_game, -season), by="game_id") %>%
inner_join(game_win, by="game_id") %>%
mutate(selected_team=ifelse(r==1, H, R),
opposing_team=ifelse(r==1, R, H),
selected_team_win=ifelse(future_game==1, NA, selected_team_win)) %>%
select(-r, -future_game) %>%
rename(home_team_name=H, road_team_name=R) %>%
ungroup()
saveRDS(game_scores, "GAME_SCORES.RDA")
get_rest_days <- function(id){
selected <- subset(game_scores, game_id==id)$selected_team
opposing <- subset(game_scores, game_id==id)$opposing_team
t <- rename(altitudes, OWN_TEAM=team, selected_team_altitude=altitude)
df1 <- subset(game_scores, home_team_name==selected | road_team_name==selected) %>%
arrange(DATE) %>%
mutate(days_since_last_game=DATE-lag(DATE),
start_of_season=ifelse(days_since_last_game>14 | is.na(days_since_last_game)==TRUE, 1, 0),
selected_team_rest=ifelse(start_of_season==1, 0, days_since_last_game),
selected_team_last_city=ifelse(start_of_season==1, selected, lag(home_team_name)),
OWN_TEAM=home_team_name) %>%
inner_join(city_lat_long, by="OWN_TEAM") %>%
rename(lat1=lat, lon1=lon) %>%
mutate(OWN_TEAM=selected_team_last_city) %>%
inner_join(city_lat_long, by="OWN_TEAM") %>%
rename(lat2=lat, lon2=lon) %>%
mutate(selected_team_travel=ifelse(selected_team_rest>2 & home_team_name==selected, 0, abs(distance_between(lon1,lat1,lon2,lat2)))) %>%
filter(game_id==id) %>%
left_join(t, by="OWN_TEAM") %>%
select(selected_team_rest, selected_team_last_city, selected_team_travel, selected_team_altitude)
t <- rename(altitudes, OWN_TEAM=team, opposing_team_altitude=altitude)
df2 <- subset(game_scores, home_team_name==opposing | road_team_name==opposing) %>%
arrange(DATE) %>%
mutate(days_since_last_game=as.numeric(DATE-lag(DATE)),
start_of_season=ifelse(days_since_last_game>14 | is.na(days_since_last_game)==TRUE, 1, 0),
opposing_team_rest=ifelse(start_of_season==1, 0, days_since_last_game),
opposing_team_last_city=ifelse(start_of_season==1, opposing, lag(home_team_name)),
OWN_TEAM=home_team_name) %>%
inner_join(city_lat_long, by="OWN_TEAM") %>%
rename(lat1=lat, lon1=lon) %>%
mutate(OWN_TEAM=opposing_team_last_city) %>%
inner_join(city_lat_long, by="OWN_TEAM") %>%
rename(lat2=lat, lon2=lon) %>%
mutate(opposing_team_travel=ifelse(opposing_team_rest>2 & home_team_name==opposing, 0, abs(distance_between(lon1,lat1,lon2,lat2)))) %>%
filter(game_id==id) %>%
left_join(t, by="OWN_TEAM") %>%
select(opposing_team_rest, opposing_team_last_city, game_id, opposing_team_travel, opposing_team_altitude)
return(data.frame(cbind(df1, df2)))
}
ids <- unique(game_scores$game_id)
loop_result <- foreach(i=1:length(ids)) %dopar% {
return(get_rest_days(ids[i]))
}
rest_days <- data.frame(rbindlist(loop_result), stringsAsFactors = FALSE) %>%
mutate(rest_differential=selected_team_rest-opposing_team_rest,
travel_differential=opposing_team_travel-selected_team_travel) %>%
select(game_id, rest_differential, travel_differential, opposing_team_travel, opposing_team_rest, selected_team_rest, selected_team_travel, selected_team_last_city, opposing_team_last_city, selected_team_altitude, opposing_team_altitude)
games_last_week <- function(id){
game <- filter(game_scores, game_id==id)
t1 <- game$selected_team
t2 <- game$opposing_team
date <- game$DATE
s <- game$season
team1 <- filter(game_scores, DATE<date & DATE>date-6 & season==s) %>%
filter(selected_team==t1 | opposing_team==t1) %>%
arrange(DATE) %>%
ungroup() %>%
mutate(back2back=as.numeric(DATE-lag(DATE)==1)) %>%
replace(is.na(.), 0) %>%
summarise(back2back=sum(back2back))
team2 <- filter(game_scores, DATE<date & DATE>date-6 & season==s) %>%
filter(selected_team==t2 | opposing_team==t2) %>%
arrange(DATE) %>%
ungroup() %>%
mutate(back2back=as.numeric(DATE-lag(DATE)==1)) %>%
replace(is.na(.), 0) %>%
summarise(back2back=sum(back2back))
if (nrow(team1)>0 & nrow(team2)){
df <- data.frame(cbind(id, team1$back2back, team2$back2back), stringsAsFactors = FALSE)
} else{
df <- data.frame(cbind(id, 0, 0), stringsAsFactors = FALSE)
}
names(df) <- c("game_id", "selected_team_games_prior_7d", "opposing_team_games_prior_7d")
df$game_id <- as.character(df$game_id)
df$selected_team_games_prior_7d <- as.numeric(df$selected_team_games_prior_7d)
df$opposing_team_games_prior_7d <- as.numeric(df$opposing_team_games_prior_7d)
tt <- subset(game_scores, home_team_name==t1 & DATE<=game$DATE & season==game$season)
if (nrow(tt)>0){
t1_last_home_game <- max(tt$DATE)
df$days_on_road_selected_team <- as.numeric(game$DATE - t1_last_home_game)
} else{
df$days_on_road_selected_team <- 0
}
rm(tt)
ttt <- subset(game_scores, home_team_name==t2 & DATE<=game$DATE & season==game$season)
if (nrow(ttt)>0){
t2_last_home_game <- max(ttt$DATE)
df$days_on_road_opposing_team <- as.numeric(game$DATE - t2_last_home_game)
} else{
df$days_on_road_opposing_team <- 0
}
rm(tt)
rm(ttt)
return(df)
}
loop_result <- foreach(i=1:length(ids)) %dopar% {
return(games_last_week(ids[i]))
}
trailing_games <- data.frame(rbindlist(loop_result), stringsAsFactors = FALSE)
## Check previous matchups
games <- unique(game_scores$game_id)
loop_result <- foreach(i=1:length(games)) %dopar% {
t <- subset(game_scores, game_id==games[i])
selected <- t$selected_team
opposing <- t$opposing_team
date <- t$DATE
s <- t$season
matchups <- filter(game_scores, selected_team %in% c(selected, opposing) & opposing_team %in% c(selected, opposing)) %>%
filter(season==s & DATE<date) %>%
select(-game_id)
if (nrow(matchups)==0){
df <- data.frame(0, 0, as.character(games[i]))
names(df) <- c("selected_team_matchup_wins", "opposing_team_matchup_wins", "game_id")
} else{
df <- mutate(matchups,
w1=ifelse(selected_team==selected, selected_team_win, 1-selected_team_win),
w2=1-w1) %>%
summarise(selected_team_matchup_wins=sum(w1), opposing_team_matchup_wins=sum(w2)) %>%
mutate(t=selected_team_matchup_wins+opposing_team_matchup_wins,
selected_team_matchup_wins=selected_team_matchup_wins/t,
opposing_team_matchup_wins=opposing_team_matchup_wins/t,
game_id=as.character(games[i])) %>%
select(-t)
}
return(df)
}
prev_matchups <- data.frame(rbindlist(loop_result), stringsAsFactors=FALSE) %>% replace(is.na(.), 0)
prev_matchups$game_id <- as.character(prev_matchups$game_id)
## Create the fill box score file
final <- inner_join(f, select(team_win, -DATE, -VENUE_R_H, -r, -playoffs, -OPP_TEAM, -future_game, -season), by=c("game_id", "OWN_TEAM")) %>%
inner_join(select(game_scores, -DATE, -playoffs, -season), by="game_id") %>%
inner_join(rest_days, by="game_id") %>%
inner_join(trailing_games, by="game_id") %>%
inner_join(prev_matchups, by="game_id") %>%
mutate(share_of_minutes=minutes/total_minutes,
share_of_playoff_minutes=ifelse(total_playoff_minutes>0, playoff_minutes/total_playoff_minutes, 0),
share_of_playoff_points=ifelse(total_playoff_points>0, playoff_points/total_playoff_points, 0),
share_of_points=points/total_points,
share_of_minutes_signed = ifelse(OWN_TEAM==selected_team, share_of_minutes, -share_of_minutes),
home_team_selected = as.numeric(home_team_name==selected_team),
selected_team_points=ifelse(home_team_selected==1, home_team_points, road_team_points),
opposing_team_points=ifelse(home_team_selected==0, home_team_points, road_team_points),
win=ifelse(future_game==1, NA, win)) %>%
dplyr::select(-VENUE_R_H, -TOT) %>% arrange(DATE, game_id) %>%
left_join(select(fivethirtyeight, elo, carm_elo, selected_team), by="selected_team") %>%
rename(elo_selected_team=elo, carm_elo_selected_team=carm_elo) %>%
left_join(select(fivethirtyeight, elo, carm_elo, opposing_team), by="opposing_team") %>%
rename(elo_opposing_team=elo, carm_elo_opposing_team=carm_elo) %>%
left_join(injuries, by="PLAYER_FULL_NAME") %>%
ungroup()
saveRDS(final, paste0("BOX_SCORES_", Sys.Date(), ".RDA"))
saveRDS(final, "BOX_SCORES.RDA")
rm(list=ls())
library(dplyr)
library(ggplot2)
library(readxl)
library(data.table)
library(glmnet)
library(tidyr)
library(parallel)
library(foreach)
library(doParallel)
source("/Users/kimlarsen/Documents/Code/NBA_RANKINGS/functions/auc.R")
source("/Users/kimlarsen/Documents/Code/NBA_RANKINGS/functions/assign_clusters.R")
source("/Users/kimlarsen/Documents/Code/NBA_RANKINGS/functions/winpercentages.R")
source("/Users/kimlarsen/Documents/Code/NBA_RANKINGS/functions/predict_game.R")
source("/Users/kimlarsen/Documents/Code/NBA_RANKINGS/functions/get_surplus_variables.R")
source("/Users/kimlarsen/Documents/Code/NBA_RANKINGS/functions/reporting.R")
source("/Users/kimlarsen/Documents/Code/NBA_RANKINGS/functions/sim_playoffs.R")
source("/Users/kimlarsen/Documents/Code/NBA_RANKINGS/functions/attach_win_perc.R")
source("/Users/kimlarsen/Documents/Code/NBA_RANKINGS/functions/manipulate_and_save_output.R")
source("/Users/kimlarsen/Documents/Code/NBA_RANKINGS/functions/save_results.R")
source("/Users/kimlarsen/Documents/Code/NBA_RANKINGS/functions/get_team_offsets.R")
## Read the box scores
box_scores <- readRDS("/Users/kimlarsen/Documents/Code/NBA_RANKINGS/cleandata/box_scores.RDA")
## Get the conferences
conferences <- read.csv("/Users/kimlarsen/Documents/Code/NBA_RANKINGS/rawdata/Conferences.csv", stringsAsFactors = FALSE)
### Create a date-index
datemap <- select(box_scores, DATE, future_game, season) %>%
ungroup() %>%
distinct(DATE, .keep_all=TRUE) %>%
arrange(DATE) %>%
mutate(DATE_INDEX=row_number()) %>%
group_by(season) %>%
mutate(season_day=row_number(),
season_day_std=ifelse(season_day>91, 0, 1-(season_day-1)/90)) %>%
ungroup()
box_scores <- inner_join(box_scores, select(datemap, DATE, DATE_INDEX, season_day, season_day_std), by="DATE")
## Get model variables
model_variables <- read.csv("/Users/kimlarsen/Documents/Code/NBA_RANKINGS/modeldetails/model_variables.csv", stringsAsFactors = FALSE)
### Global settings
cutoff <- 8 # minutes per game. if a player plays less than this amount, he is excluded
estimation_window <- 1000 # number of days used to estimate the model
winstreak_window <- 91 # number of days used to calculate the weighted win %, for the short term effect
winstreak_window_s <- 31 # number of days used to calculate the weighted win %
playing_time_window <- 91 # number of days used to estimate average playing time
cluster_window <- 91 # number of days used for cluster assignment
alpha <- 0 # for elastic net
sims <- 0 # number of random normal draws used when playing games
save_results <- 1 # set to 1 if you want to save the results
weighted_win_rates <- 1
use_current_rosters <- 1
current_season <- max(box_scores$season)
adjust_intercept_by_team <- 0
### When to start and end the forecasts
start_date <- min(subset(box_scores, season==2016)$DATE)
end_date <- max(subset(box_scores, season==2016 & playoffs==0)$DATE)
### Cut off the box scores
box_scores <- subset(box_scores, DATE<=end_date) %>%
ungroup() %>%
mutate(fb=ifelse(season==max(season), 1, 0))
### specify start and end points
ignore_season_prior_to <- 2013
start_index <- subset(datemap, DATE==start_date)$DATE_INDEX
end_index <- subset(datemap, DATE==end_date)$DATE_INDEX
### Assign clusters to the historical data and calculate rolling win percentages
centroids <- readRDS("/Users/kimlarsen/Documents/Code/NBA_RANKINGS/centroids/centroids.RDA")
s <- min(subset(datemap, season==ignore_season_prior_to)$DATE_INDEX)
e <-max(subset(datemap, future_game==0)$DATE_INDEX)
ncore <- detectCores()-2
registerDoParallel(ncore)
loop_result <- foreach(i=s:e) %dopar% {
#for (i in s:e){
### Get the data inside the window
thisseason <- datemap[i, "season"]
inwindow <- filter(box_scores, DATE_INDEX<i & DATE_INDEX>i-cluster_window)
thisdate <- filter(box_scores, DATE_INDEX==i)
thisseason <- thisdate[1,"season"]
## Get the win percentages
w <- weighted_win_rates
if (thisseason != current_season){
w <-0
}
win_perc1 <- winpercentages(filter(inwindow, DATE_INDEX>i-winstreak_window), thisseason, w)
win_perc2 <- winpercentages(filter(inwindow, DATE_INDEX>i-winstreak_window_s), thisseason, w)
## Assign clusters
clusters <- assign_clusters(centroids, inwindow, cutoff, thisseason)
### Join
t <- inner_join(thisdate, select(clusters, PLAYER_FULL_NAME, Cluster), by="PLAYER_FULL_NAME")
f <- attach_win_perc(t, win_perc1, win_perc2)
rm(win_perc1)
rm(win_perc2)
return(f)
}
box_scores_plus <- data.frame(rbindlist(loop_result))
## Save clusters
clusters_and_players <-
select(box_scores_plus, DATE, PLAYER_FULL_NAME, Cluster, season) %>%
ungroup() %>%
filter(season==max(season)) %>%
arrange(Cluster, PLAYER_FULL_NAME, DATE)
### Number of clusters
nclus <- max(box_scores_plus$Cluster)
### Predict the past and the future
counter <- 1
modelupdates <- 1
index <- 1
scores <- list()
model_details <- list()
model_parts <- list()
max_real_date <- max(subset(box_scores_plus, future_game==0)$DATE_INDEX)
posterior <- 0.5 ## average probability of winning a game if all is perfect
prior <- 0.5 ## expected average probability of winning a game
cr <- 0 ## current rosters
for (i in start_index:end_index){
### ELO weight indicator
w <- weighted_win_rates ## ELO weights
### Make sure we only use real data
j <- min(max_real_date, i)
### Check the dates
print(subset(datemap, DATE_INDEX==i)$DATE)
print(subset(datemap, DATE_INDEX==j)$DATE)
### Data inside the window
inwindow <- filter(box_scores_plus, DATE_INDEX<j & DATE_INDEX>j-estimation_window)
### Estimate the model unless we have run out of historical data
if (counter==1 | i <= max_real_date){
### Get game_id level data
game_data <- distinct(inwindow, game_id, .keep_all=TRUE)
### Combine the data
x <- get_surplus_variables(inwindow, nclus)  %>%
inner_join(game_data, by="game_id")
## Estimate the model
Y <- x$selected_team_win
x <- x[,names(x) %in% unique(model_variables$Variable)]
X <- model.matrix(as.formula(Y ~ .), x)
set.seed(2015)
model <- cv.glmnet(y=Y, x=X, family="binomial", alpha=alpha, parallel=FALSE, nfolds=10)
c <- as.matrix(coef(model, s=model$lambda.1se))
p <- 1/(1+exp(-X%*%c[-1]))
## Save model details
details <- cbind.data.frame(sapply(row.names(c), as.character), sapply(c, as.numeric), stringsAsFactors = FALSE)
names(details) <- c("Variable", "Coeff")
details$DATE <- subset(datemap, DATE_INDEX==i)$DATE
details$AUROC <- AUC(Y, p)[[1]]
details$N <- nrow(X)
model_details[[modelupdates]] <- subset(details, Variable != "(Intercept)")
modelupdates <- modelupdates+1
## Get the latest win percentages
thisseason <- filter(inwindow, DATE==max(DATE))[1,"season"]
if (thisseason != current_season){
w <-0
}
inwindow <- filter(inwindow, DATE_INDEX>j-max(winstreak_window, playing_time_window))
win_perc1 <- winpercentages(inwindow, thisseason, w)
win_perc2 <- winpercentages(inwindow, thisseason, w)
}
### Special case for the last observed day
offsets_by_team <- NULL
if (i==max_real_date){
if (thisseason==current_season){
cr <- use_current_rosters
}
ytd_scores <- data.frame(rbindlist(scores)) %>%
filter(current_season_data_used==1 & is.na(prob_selected_team_win_d)==FALSE & is.na(selected_team_win)==FALSE)
posterior=mean(ytd_scores$prob_selected_team_win_d)
prior=mean(ytd_scores$selected_team_win)
if (adjust_intercept_by_team==1){
offsets_by_team <- get_team_offsets(ytd_scores)
}
rm(ytd_scores)
### Get the latest data for forecasting
inwindow <- filter(box_scores_plus, DATE_INDEX<=max_real_date & DATE_INDEX>max_real_date-playing_time_window+1)
win_perc1 <- winpercentages(inwindow, thisseason, w)
win_perc2 <- winpercentages(inwindow, thisseason, w)
}
### Predict game outcomes
thisday <- filter(box_scores, DATE_INDEX==i)
games <- unique(thisday$game_id)
thisdate <- max(thisday$DATE)
inwindow_active <- mutate(inwindow,
today=as.Date(thisdate),
injured=ifelse(is.na(injury_status), 0, ifelse(today>=injury_scrape_date & today<return_date, 1, 0))
)
injured_players <- unique(subset(inwindow_active, injured==1)$PLAYER_FULL_NAME)
if (length(injured_players)>0){
print(paste0("Injuries: ", injured_players))
inwindow_active <- filter(inwindow_active, injured==0)
}
if (w==1){
print("Using CARM-ELO weights")
}
if (cr==1){
print("Using current scraped rosters")
}
for (d in 1:length(games)){
pred <- predict_game(c, filter(inwindow_active, DATE_INDEX>j-playing_time_window), win_perc1, win_perc2, games[d], sims, subset(thisday, game_id==games[d]), nclus, prior, posterior, "/Users/kimlarsen/Documents/Code/NBA_RANKINGS/rawdata/", model_variables, cr, offsets_by_team)
scores[[counter]] <- pred[[1]]
model_parts[[counter]] <- pred[[2]]
counter <- counter + 1
}
rm(inwindow_active)
rm(inwindow)
}
### Manipulate and save the output
#results <- manipulate_and_save_output(clusters_and_players, scores, model_parts, model_details, "/Users/kimlarsen/Documents/Code/NBA_RANKINGS/", 0, 1, as.Date("2016-11-20"))
#results <- manipulate_and_save_output(clusters_and_players, scores, model_parts, model_details, "/Users/kimlarsen/Documents/Code/NBA_RANKINGS/", 0, 0)
results <- manipulate_and_save_output(clusters_and_players, scores, model_parts, model_details, "/Users/kimlarsen/Documents/Code/NBA_RANKINGS/", 0, 1, NA)
library(BASS)
