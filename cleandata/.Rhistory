road <- rename(schedule, NBAstuffer.Initials=ROAD) %>%
inner_join(team_map, by="NBAstuffer.Initials") %>%
rename(road_team=City) %>%
mutate(DATE=as.Date(Date, format="%m/%d/%Y")) %>%
select(road_team, DATE)
set.seed(2015)
future_schedule <- data.frame(cbind(home, road)) %>% filter(DATE>max_date) %>%
mutate(r=runif(n()),
future_game=1,
OWN_TEAM=ifelse(r>0.5, home_team, road_team),
OPP_TEAM=ifelse(OWN_TEAM==home_team, road_team, home_team),
VENUE_R_H=ifelse(OWN_TEAM==home_team, 'H', 'R'),
DATA_SET="2016-2017 Regular Season",
season=2016,
PLAYER_FULL_NAME="BLANK") %>%
select(DATE, OWN_TEAM, OPP_TEAM, VENUE_R_H, DATA_SET, future_game, PLAYER_FULL_NAME, season)
f <- bind_rows(f, future_schedule) %>%
replace(is.na(.), 0)
setwd("/Users/kimlarsen/Documents/Code/NBA_RANKINGS/cleandata")
## Create an ID
f$cat <- paste0(f$OWN_TEAM, f$OPP_TEAM)
striHelper <- function(x) stri_c(x[stri_order(x)], collapse = "")
f$game_id <- paste0(f$DATE, vapply(stri_split_boundaries(f$cat, type = "character"), striHelper, ""))
f$cat <- NULL
## Team/game level points
team_pts <- group_by(f, game_id, OWN_TEAM, OPP_TEAM, VENUE_R_H, DATE, future_game) %>%
summarise(total_playoff_minutes=sum(minutes*playoffs),
total_playoff_points=sum(points*playoffs),
total_minutes=sum(minutes),
total_points=sum(points),
playoffs=max(playoffs)) %>%
ungroup()
## Game level points
game_pts <- group_by(team_pts, game_id, future_game) %>%
mutate(home_team_points=total_points*(VENUE_R_H=='H'),
road_team_points=total_points*(VENUE_R_H=='R')) %>%
summarise(max_game_points=max(total_points),
home_team_points=sum(home_team_points),
road_team_points=sum(road_team_points))
## Random indicator to choose the selected team
game_pts$r <- as.numeric(rbinom(nrow(game_pts), 1, 0.5)>0.5)
## Create win indicators at the game/team level
team_win <- inner_join(team_pts, select(game_pts, game_id, max_game_points, r), by="game_id") %>%
mutate(win=as.numeric(total_points==max_game_points)) %>%
select(-max_game_points)
city_names <- distinct(team_win, OWN_TEAM) %>%
mutate(OWN_TEAM_NAME=ifelse(OWN_TEAM=="Golden State", "Oakland", OWN_TEAM),
OWN_TEAM_NAME=ifelse(OWN_TEAM_NAME=="LA Clippers", "Los Angeles", OWN_TEAM_NAME),
OWN_TEAM_NAME=ifelse(OWN_TEAM_NAME=="Indiana", "Indianapolis", OWN_TEAM_NAME),
OWN_TEAM_NAME=ifelse(OWN_TEAM_NAME=="LA Lakers", "Los Angeles", OWN_TEAM_NAME),
OWN_TEAM_NAME=ifelse(OWN_TEAM_NAME=="Utah", "Salt Lake City", OWN_TEAM_NAME)) %>%
arrange(OWN_TEAM_NAME)
city_lat_long <- cbind(rbindlist(lapply(split(city_names$OWN_TEAM_NAME, city_names$OWN_TEAM_NAME), function(x) return(geocode(as.character(x))))), city_names$OWN_TEAM)
names(city_lat_long) <- c("lon","lat","OWN_TEAM")
## Create win indicators at the game level
game_win <- group_by(team_win, game_id, DATE, future_game) %>%
mutate(selected_team_win=ifelse(r==1, win*(VENUE_R_H=='H'), win*(VENUE_R_H=='R'))) %>%
summarise(selected_team_win=max(selected_team_win),
playoffs=max(playoffs)) %>%
ungroup()
## Create a game level summary file to be saved
future_flipped <- filter(team_win, future_game==1) %>%
mutate(VENUE_R_H2=ifelse(VENUE_R_H=='H', 'R', 'H'),
OWN_TEAM2=OPP_TEAM,
OPP_TEAM2=OWN_TEAM) %>%
select(-OPP_TEAM, -OWN_TEAM) %>%
rename(OPP_TEAM=OPP_TEAM2,
OWN_TEAM=OWN_TEAM2,
VENUE_R_H=VENUE_R_H2)
team_win <- bind_rows(team_win, future_flipped) %>% arrange(DATE, game_id)
split <- split(team_win, team_win$game_id)
game_scores <- data.frame(rbindlist(lapply(split, function(x) spread(select(x, game_id, VENUE_R_H, OWN_TEAM), VENUE_R_H, OWN_TEAM))), stringsAsFactors = FALSE) %>%
inner_join(select(game_pts, -max_game_points, -future_game), by="game_id") %>%
inner_join(game_win, by="game_id") %>%
mutate(selected_team=ifelse(r==1, H, R),
opposing_team=ifelse(r==1, R, H),
selected_team_win=ifelse(future_game==1, NA, selected_team_win)) %>%
select(-r, -future_game) %>%
rename(home_team_name=H, road_team_name=R)
saveRDS(game_scores, "GAME_SCORES.RDA")
get_rest_days <- function(id){
selected <- subset(game_scores, game_id==id)$selected_team
opposing <- subset(game_scores, game_id==id)$opposing_team
df1 <- subset(game_scores, home_team_name==selected | road_team_name==selected) %>%
arrange(DATE) %>%
mutate(days_since_last_game=DATE-lag(DATE),
start_of_season=ifelse(days_since_last_game>14 | is.na(days_since_last_game)==TRUE, 1, 0),
selected_team_rest=ifelse(start_of_season==1, 0, days_since_last_game),
selected_team_last_city=ifelse(start_of_season==1, selected, lag(home_team_name)),
OWN_TEAM=home_team_name) %>%
inner_join(city_lat_long, by="OWN_TEAM") %>%
rename(lat1=lat, lon1=lon) %>%
mutate(OWN_TEAM=selected_team_last_city) %>%
inner_join(city_lat_long, by="OWN_TEAM") %>%
rename(lat2=lat, lon2=lon) %>%
mutate(selected_team_travel=ifelse(selected_team_rest>2 & home_team_name==selected, 0, abs(distance_between(lon1,lat1,lon2,lat2)))) %>%
filter(game_id==id) %>%
select(selected_team_rest, selected_team_last_city, selected_team_travel)
df2 <- subset(game_scores, home_team_name==opposing | road_team_name==opposing) %>%
arrange(DATE) %>%
mutate(days_since_last_game=DATE-lag(DATE),
start_of_season=ifelse(days_since_last_game>14 | is.na(days_since_last_game)==TRUE, 1, 0),
opposing_team_rest=ifelse(start_of_season==1, 0, days_since_last_game),
opposing_team_last_city=ifelse(start_of_season==1, opposing, lag(home_team_name)),
OWN_TEAM=home_team_name) %>%
inner_join(city_lat_long, by="OWN_TEAM") %>%
rename(lat1=lat, lon1=lon) %>%
mutate(OWN_TEAM=opposing_team_last_city) %>%
inner_join(city_lat_long, by="OWN_TEAM") %>%
rename(lat2=lat, lon2=lon) %>%
mutate(opposing_team_travel=ifelse(opposing_team_rest>2 & home_team_name==opposing, 0, abs(distance_between(lon1,lat1,lon2,lat2)))) %>%
filter(game_id==id) %>%
select(opposing_team_rest, opposing_team_last_city, game_id, opposing_team_travel)
return(data.frame(cbind(df1, df2)))
}
ids <- unique(game_scores$game_id)
loop_result <- foreach(i=1:length(ids)) %dopar% {
return(get_rest_days(ids[i]))
}
rest_days <- data.frame(rbindlist(loop_result)) %>%
mutate(rest_differential=selected_team_rest-opposing_team_rest,
travel_differential=opposing_team_travel-selected_team_travel) %>%
select(game_id, rest_differential, travel_differential, opposing_team_travel, opposing_team_rest, selected_team_restm, selected_team_travel, selected_team_last_city, opposing_team_last_city)
dateindex <- distinct(f, DATE) %>% mutate(DATE_INDEX=row_number())
## Create the fill box score file
final <- inner_join(f, select(team_win, -DATE, -VENUE_R_H, -r, -playoffs, -OPP_TEAM, -future_game), by=c("game_id", "OWN_TEAM")) %>%
inner_join(select(game_scores, -DATE, -playoffs), by="game_id") %>%
inner_join(rest_days, by="game_id") %>%
mutate(share_of_minutes=minutes/total_minutes,
share_of_playoff_minutes=ifelse(total_playoff_minutes>0, playoff_minutes/total_playoff_minutes, 0),
share_of_playoff_points=ifelse(total_playoff_points>0, playoff_points/total_playoff_points, 0),
share_of_points=points/total_points,
home_points=home_team*points,
road_points=road_team*points,
share_of_minutes_signed = ifelse(OWN_TEAM==selected_team, share_of_minutes, -share_of_minutes),
home_team_selected = as.numeric(home_team_name==selected_team),
win=ifelse(future_game==1, NA, win)) %>%
dplyr::select(-VENUE_R_H, -TOT) %>% arrange(DATE, game_id) %>%
inner_join(dateindex, by="DATE") %>%
ungroup()
saveRDS(final, "BOX_SCORES.RDA")
rm(list = ls())
library(xlsx)
library(dplyr)
library(readxl)
library(stringi)
library(tidyr)
library(reshape2)
library(data.table)
library(dplyr)
library(ggmap)
library(parallel)
library(foreach)
library(doParallel)
source("/Users/kimlarsen/Documents/Code/NBA_RANKINGS/functions/distance_between.R")
setwd("/Users/kimlarsen/Documents/Code/NBA_RANKINGS/rawdata/")
## Read the raw data
read_player_data <- function(season, first_labels, suffix){
data <- data.frame(read_excel(paste0("s", suffix, ".xlsx"), sheet=1))
meta <- data.frame(read_excel(paste0("s", suffix, ".xlsx"), sheet=2, col_names = FALSE))
labels <- c(first_labels, meta$X1)
attr(data, "variable.labels") <- labels
n <- gsub("_$", "", gsub("__", "_", gsub(".", "_", names(data), fixed=T)))
names(data) <- n
data <- rename(data,
points=PTS,
assists=A,
offensive_rebounds=OR,
defensive_rebounds=DR,
turnovers=TO,
threepointers_made=X3P,
steals=ST,
minutes=MIN,
threepoint_attempts=X3PA,
fieldgoal_attempts=FGA,
fieldgoals_made=FG,
freethrows_made=FT,
freethrow_attempts=FTA,
fouls=PF,
blocks=BL)
return(data)
}
s1 <- read_player_data("NBA-2012-2013", c("SEASON", "DATE", "PLAYER FULL NAME", "POSITION"), 1)
s2 <- read_player_data("NBA-2013-2014", c("SEASON", "DATE", "PLAYER FULL NAME", "POSITION"), 2)
s3 <- read_player_data("NBA-2014-2015", c("SEASON", "DATE", "PLAYER FULL NAME", "POSITION"), 3)
s4 <- read_player_data("NBA-2015-2016", c("SEASON", "DATE", "PLAYER FULL NAME", "POSITION"), 4)
## Add some indicators
f <- rbind.data.frame(s1, s2, s3, s4) %>%
mutate(home_team=as.numeric(VENUE_R_H=='H'),
road_team=as.numeric(VENUE_R_H=='R'),
playoffs=as.numeric(substr(DATA_SET, 6, 13)=="Playoffs"),
season=ifelse(playoffs==0, as.numeric(substr(DATA_SET, 1, 4)), as.numeric(substr(DATA_SET, 1, 4))-1),
playoff_minutes=playoffs*minutes,
playoff_points=playoffs*points,
DATE=as.Date(DATE, format="%m/%d/%Y"),
quarter=quarter(DATE),
future_game=0)
max_date <- max(f$DATE)
## Read the schedule
schedule <- data.frame(read_excel("schedule.xlsx", sheet=1))
team_map <- data.frame(read_excel("schedule.xlsx", sheet=2)) %>%
select(City, NBAstuffer.Initials) %>% distinct(NBAstuffer.Initials, .keep_all=TRUE)
home <- rename(schedule, NBAstuffer.Initials=HOME) %>%
inner_join(team_map, by="NBAstuffer.Initials") %>%
rename(home_team=City) %>%
mutate(DATE=as.Date(Date, format="%m/%d/%Y")) %>%
select(home_team)
road <- rename(schedule, NBAstuffer.Initials=ROAD) %>%
inner_join(team_map, by="NBAstuffer.Initials") %>%
rename(road_team=City) %>%
mutate(DATE=as.Date(Date, format="%m/%d/%Y")) %>%
select(road_team, DATE)
set.seed(2015)
future_schedule <- data.frame(cbind(home, road)) %>% filter(DATE>max_date) %>%
mutate(r=runif(n()),
future_game=1,
OWN_TEAM=ifelse(r>0.5, home_team, road_team),
OPP_TEAM=ifelse(OWN_TEAM==home_team, road_team, home_team),
VENUE_R_H=ifelse(OWN_TEAM==home_team, 'H', 'R'),
DATA_SET="2016-2017 Regular Season",
season=2016,
PLAYER_FULL_NAME="BLANK") %>%
select(DATE, OWN_TEAM, OPP_TEAM, VENUE_R_H, DATA_SET, future_game, PLAYER_FULL_NAME, season)
f <- bind_rows(f, future_schedule) %>%
replace(is.na(.), 0)
setwd("/Users/kimlarsen/Documents/Code/NBA_RANKINGS/cleandata")
## Create an ID
f$cat <- paste0(f$OWN_TEAM, f$OPP_TEAM)
striHelper <- function(x) stri_c(x[stri_order(x)], collapse = "")
f$game_id <- paste0(f$DATE, vapply(stri_split_boundaries(f$cat, type = "character"), striHelper, ""))
f$cat <- NULL
## Team/game level points
team_pts <- group_by(f, game_id, OWN_TEAM, OPP_TEAM, VENUE_R_H, DATE, future_game) %>%
summarise(total_playoff_minutes=sum(minutes*playoffs),
total_playoff_points=sum(points*playoffs),
total_minutes=sum(minutes),
total_points=sum(points),
playoffs=max(playoffs)) %>%
ungroup()
## Game level points
game_pts <- group_by(team_pts, game_id, future_game) %>%
mutate(home_team_points=total_points*(VENUE_R_H=='H'),
road_team_points=total_points*(VENUE_R_H=='R')) %>%
summarise(max_game_points=max(total_points),
home_team_points=sum(home_team_points),
road_team_points=sum(road_team_points))
## Random indicator to choose the selected team
game_pts$r <- as.numeric(rbinom(nrow(game_pts), 1, 0.5)>0.5)
## Create win indicators at the game/team level
team_win <- inner_join(team_pts, select(game_pts, game_id, max_game_points, r), by="game_id") %>%
mutate(win=as.numeric(total_points==max_game_points)) %>%
select(-max_game_points)
city_names <- distinct(team_win, OWN_TEAM) %>%
mutate(OWN_TEAM_NAME=ifelse(OWN_TEAM=="Golden State", "Oakland", OWN_TEAM),
OWN_TEAM_NAME=ifelse(OWN_TEAM_NAME=="LA Clippers", "Los Angeles", OWN_TEAM_NAME),
OWN_TEAM_NAME=ifelse(OWN_TEAM_NAME=="Indiana", "Indianapolis", OWN_TEAM_NAME),
OWN_TEAM_NAME=ifelse(OWN_TEAM_NAME=="LA Lakers", "Los Angeles", OWN_TEAM_NAME),
OWN_TEAM_NAME=ifelse(OWN_TEAM_NAME=="Utah", "Salt Lake City", OWN_TEAM_NAME)) %>%
arrange(OWN_TEAM_NAME)
city_lat_long <- cbind(rbindlist(lapply(split(city_names$OWN_TEAM_NAME, city_names$OWN_TEAM_NAME), function(x) return(geocode(as.character(x))))), city_names$OWN_TEAM)
names(city_lat_long) <- c("lon","lat","OWN_TEAM")
## Create win indicators at the game level
game_win <- group_by(team_win, game_id, DATE, future_game) %>%
mutate(selected_team_win=ifelse(r==1, win*(VENUE_R_H=='H'), win*(VENUE_R_H=='R'))) %>%
summarise(selected_team_win=max(selected_team_win),
playoffs=max(playoffs)) %>%
ungroup()
## Create a game level summary file to be saved
future_flipped <- filter(team_win, future_game==1) %>%
mutate(VENUE_R_H2=ifelse(VENUE_R_H=='H', 'R', 'H'),
OWN_TEAM2=OPP_TEAM,
OPP_TEAM2=OWN_TEAM) %>%
select(-OPP_TEAM, -OWN_TEAM) %>%
rename(OPP_TEAM=OPP_TEAM2,
OWN_TEAM=OWN_TEAM2,
VENUE_R_H=VENUE_R_H2)
team_win <- bind_rows(team_win, future_flipped) %>% arrange(DATE, game_id)
split <- split(team_win, team_win$game_id)
game_scores <- data.frame(rbindlist(lapply(split, function(x) spread(select(x, game_id, VENUE_R_H, OWN_TEAM), VENUE_R_H, OWN_TEAM))), stringsAsFactors = FALSE) %>%
inner_join(select(game_pts, -max_game_points, -future_game), by="game_id") %>%
inner_join(game_win, by="game_id") %>%
mutate(selected_team=ifelse(r==1, H, R),
opposing_team=ifelse(r==1, R, H),
selected_team_win=ifelse(future_game==1, NA, selected_team_win)) %>%
select(-r, -future_game) %>%
rename(home_team_name=H, road_team_name=R)
saveRDS(game_scores, "GAME_SCORES.RDA")
get_rest_days <- function(id){
selected <- subset(game_scores, game_id==id)$selected_team
opposing <- subset(game_scores, game_id==id)$opposing_team
df1 <- subset(game_scores, home_team_name==selected | road_team_name==selected) %>%
arrange(DATE) %>%
mutate(days_since_last_game=DATE-lag(DATE),
start_of_season=ifelse(days_since_last_game>14 | is.na(days_since_last_game)==TRUE, 1, 0),
selected_team_rest=ifelse(start_of_season==1, 0, days_since_last_game),
selected_team_last_city=ifelse(start_of_season==1, selected, lag(home_team_name)),
OWN_TEAM=home_team_name) %>%
inner_join(city_lat_long, by="OWN_TEAM") %>%
rename(lat1=lat, lon1=lon) %>%
mutate(OWN_TEAM=selected_team_last_city) %>%
inner_join(city_lat_long, by="OWN_TEAM") %>%
rename(lat2=lat, lon2=lon) %>%
mutate(selected_team_travel=ifelse(selected_team_rest>2 & home_team_name==selected, 0, abs(distance_between(lon1,lat1,lon2,lat2)))) %>%
filter(game_id==id) %>%
select(selected_team_rest, selected_team_last_city, selected_team_travel)
df2 <- subset(game_scores, home_team_name==opposing | road_team_name==opposing) %>%
arrange(DATE) %>%
mutate(days_since_last_game=DATE-lag(DATE),
start_of_season=ifelse(days_since_last_game>14 | is.na(days_since_last_game)==TRUE, 1, 0),
opposing_team_rest=ifelse(start_of_season==1, 0, days_since_last_game),
opposing_team_last_city=ifelse(start_of_season==1, opposing, lag(home_team_name)),
OWN_TEAM=home_team_name) %>%
inner_join(city_lat_long, by="OWN_TEAM") %>%
rename(lat1=lat, lon1=lon) %>%
mutate(OWN_TEAM=opposing_team_last_city) %>%
inner_join(city_lat_long, by="OWN_TEAM") %>%
rename(lat2=lat, lon2=lon) %>%
mutate(opposing_team_travel=ifelse(opposing_team_rest>2 & home_team_name==opposing, 0, abs(distance_between(lon1,lat1,lon2,lat2)))) %>%
filter(game_id==id) %>%
select(opposing_team_rest, opposing_team_last_city, game_id, opposing_team_travel)
return(data.frame(cbind(df1, df2)))
}
ids <- unique(game_scores$game_id)
loop_result <- foreach(i=1:length(ids)) %dopar% {
return(get_rest_days(ids[i]))
}
rest_days <- data.frame(rbindlist(loop_result)) %>%
mutate(rest_differential=selected_team_rest-opposing_team_rest,
travel_differential=opposing_team_travel-selected_team_travel) %>%
select(game_id, rest_differential, travel_differential, opposing_team_travel, opposing_team_rest, selected_team_rest, selected_team_travel, selected_team_last_city, opposing_team_last_city)
dateindex <- distinct(f, DATE) %>% mutate(DATE_INDEX=row_number())
## Create the fill box score file
final <- inner_join(f, select(team_win, -DATE, -VENUE_R_H, -r, -playoffs, -OPP_TEAM, -future_game), by=c("game_id", "OWN_TEAM")) %>%
inner_join(select(game_scores, -DATE, -playoffs), by="game_id") %>%
inner_join(rest_days, by="game_id") %>%
mutate(share_of_minutes=minutes/total_minutes,
share_of_playoff_minutes=ifelse(total_playoff_minutes>0, playoff_minutes/total_playoff_minutes, 0),
share_of_playoff_points=ifelse(total_playoff_points>0, playoff_points/total_playoff_points, 0),
share_of_points=points/total_points,
home_points=home_team*points,
road_points=road_team*points,
share_of_minutes_signed = ifelse(OWN_TEAM==selected_team, share_of_minutes, -share_of_minutes),
home_team_selected = as.numeric(home_team_name==selected_team),
win=ifelse(future_game==1, NA, win)) %>%
dplyr::select(-VENUE_R_H, -TOT) %>% arrange(DATE, game_id) %>%
inner_join(dateindex, by="DATE") %>%
ungroup()
saveRDS(final, "BOX_SCORES.RDA")
rm(list = ls())
library(dplyr)
library(ggplot2)
library(readxl)
library(data.table)
library(glmnet)
library(tidyr)
library(parallel)
library(foreach)
library(doParallel)
box_scores <- readRDS("/Users/kimlarsen/Documents/Code/NBA_RANKINGS/cleandata/box_scores.RDA")
source("/Users/kimlarsen/Documents/Code/NBA_RANKINGS/functions/auc.R")
source("/Users/kimlarsen/Documents/Code/NBA_RANKINGS/functions/assign_clusters.R")
source("/Users/kimlarsen/Documents/Code/NBA_RANKINGS/functions/weighted_winpercentages.R")
source("/Users/kimlarsen/Documents/Code/NBA_RANKINGS/functions/predict_game.R")
source("/Users/kimlarsen/Documents/Code/NBA_RANKINGS/functions/get_surplus_variables.R")
source("/Users/kimlarsen/Documents/Code/NBA_RANKINGS/functions/reporting.R")
### Global settings
cutoff <- 8 # minutes per game. if a player plays less than this amount, he is excluded
estimation_window <- 360 # number of days used to estimate the model
winstreak_window <- 91 # number of days used to calculate the weighted win %
playing_time_window <- 91 # number of days used to estimate average playing time
cluster_window <- 91 # number of days used for cluster assignment
alpha <- 0 # for elastic net
sims <- 1 # number of random normal draws used when playing games
ignore_winstreaks <- 0 # if equal to 1, win % are ignored in the model
save_results <- 1 # set to 1 if you want to save the results
### When to start and end the forecasts
start_date <- min(subset(box_scores, season==2015)$DATE)
end_date <- max(subset(box_scores, season==2015)$DATE)
### Cut off the box scores
box_scores <- subset(box_scores, DATE<=end_date)
### If we want to trick the model to backcast, edit the future_game indicator by filling in the xs
#box_scores <- mutate(box_scores, future_game = ifelse(DATE>as.Date("xxxxxxx"), 1, future_game))
### Create a date-index
datemap <- select(box_scores, DATE, DATE_INDEX, future_game, season) %>% distinct(DATE, .keep_all=TRUE)
### specify start and end points
ignore_season_prior_to <- 2014
start_index <- subset(datemap, DATE==start_date)$DATE_INDEX
end_index <- subset(datemap, DATE==end_date)$DATE_INDEX
#end_index <- start_index+5
### Assign clusters to the historical data and calculate rolling win percentages
centroids <- readRDS("/Users/kimlarsen/Documents/Code/NBA_RANKINGS/centroids/centroids.RDA")
s <- min(subset(datemap, season==ignore_season_prior_to)$DATE_INDEX)
e <-max(subset(datemap, future_game==0)$DATE_INDEX)
ncore <- detectCores()-1
registerDoParallel(ncore)
loop_result <- foreach(i=s:e) %dopar% {
### Data inside the window
inwindow <- filter(box_scores, DATE_INDEX<datemap[i, "DATE_INDEX"] & DATE_INDEX>datemap[i-cluster_window, "DATE_INDEX"])
thisdate <- filter(box_scores, DATE_INDEX==datemap[i, "DATE_INDEX"])
thisseason <- thisdate[1,"season"]
win_perc <- weighted_winpercentages(filter(inwindow, DATE_INDEX>datemap[i-winstreak_window, "DATE_INDEX"]), thisseason) %>%
select(-win_rate)
clusters <- assign_clusters(centroids, inwindow, cutoff)
### Join against win percentages and clusters
f <- inner_join(thisdate, select(clusters, PLAYER_FULL_NAME, Cluster), by="PLAYER_FULL_NAME") %>%
left_join(select(win_perc, -opposing_team), by="selected_team") %>%
rename(winrate_selected_team=w_win_rate) %>%
left_join(select(win_perc, -early_season, -selected_team), by="opposing_team") %>%
rename(winrate_opposing_team=w_win_rate) %>%
replace(is.na(.), 0) %>%
ungroup()
if (ignore_winstreaks==1){
f$winrate_opposing_team <- 0
f$winrate_selected_team <- 0
}
return(f)
}
box_scores_plus <- data.frame(rbindlist(loop_result))
## Save clusters
clusters_and_players <-
select(box_scores_plus, DATE, PLAYER_FULL_NAME, Cluster, points, assists, offensive_rebounds, defensive_rebounds, turnovers, threepointers_made, threepoint_attempts, steals, minutes, fieldgoal_attempts, fieldgoals_made, freethrow_attempts, freethrows_made, fouls, blocks) %>%
distinct(PLAYER_FULL_NAME, .keep_all=TRUE) %>%
arrange(Cluster, PLAYER_FULL_NAME, DATE)
### Number of clusters
nclus <- max(box_scores_plus$Cluster)
### Predict the past and the future
counter <- 1
modelupdates <- 1
index <- 1
scores <- list()
model_details <- list()
model_parts <- list()
for (i in start_index:end_index){
### Make sure we only use real data
max_real_date <- max(subset(datemap, future_game==0)$DATE_INDEX)
j <- min(max_real_date, i)
### Check the dates
print(datemap[i, "DATE"])
print(datemap[j, "DATE"])
### Data inside the window
inwindow <- filter(box_scores_plus, DATE_INDEX<datemap[j, "DATE_INDEX"] & DATE_INDEX>datemap[j-estimation_window, "DATE_INDEX"])
### Estimate the model unless we have run out of historical data
if (counter==1 | i <= j){
### Get rest and travel by game_id
rest_and_travel <- select(inwindow, game_id, opposing_team_travel, selected_team_travel, opposing_team_rest, selected_team_rest) %>%
distinct(game_id, .keep_all=TRUE)
### Estimate the model
x <- get_surplus_variables(inwindow, nclus)  %>%
inner_join(rest_and_travel, by="game_id") %>%
select(-game_id, -selected_team)
Y <- x$selected_team_win
x$selected_team_win <- NULL
X <- model.matrix(as.formula(Y ~ .), x)
model <- cv.glmnet(y=Y, x=X, family="binomial", alpha=alpha, parallel=FALSE, nfolds=10)
c <- as.matrix(coef(model, s=model$lambda.1se))
p <- prob_win <- 1/(1+exp(-X%*%c[-1]))
## Save model details
details <- cbind.data.frame(sapply(row.names(c), as.character), sapply(c, as.numeric), stringsAsFactors = FALSE)
names(details) <- c("Variable", "Coeff")
details$DATE <- datemap[i, "DATE"]
details$AUROC <- AUC(Y, p)[[1]]
details$N <- nrow(X)
model_details[[modelupdates]] <- subset(details, Variable != "(Intercept)")
modelupdates <- modelupdates+1
## Get the latest win percentages
thisseason <- filter(inwindow, DATE==max(DATE))
win_perc <- weighted_winpercentages(filter(inwindow, DATE_INDEX>datemap[i-winstreak_window, "DATE_INDEX"]), thisseason[1,"season"]) %>%
select(-win_rate)
}
### Predict game outcomes
thisday <- filter(box_scores, DATE==datemap[i, "DATE"])
games <- unique(thisday$game_id)
for (d in 1:length(games)){
pred <- predict_game(c, filter(inwindow, DATE_INDEX>datemap[j-playing_time_window, "DATE_INDEX"]), win_perc, games[d], datemap[i, "DATE"], sims, subset(thisday, game_id==games[d]), nclus, 0.50, 0.55, "/Users/kimlarsen/Documents/Code/NBA_RANKINGS/rawdata/")
scores[[counter]] <- pred[[1]]
model_parts[[counter]] <- pred[[2]]
counter <- counter + 1
}
}
output <- data.frame(rbindlist(scores), stringsAsFactors = FALSE)
models <- data.frame(rbindlist(model_details), stringsAsFactors = FALSE)
parts <- data.frame(rbindlist(model_parts), stringsAsFactors = FALSE)
conf <- read_excel("/Users/kimlarsen/Documents/Code/NBA_RANKINGS/rawdata/Conferences.xlsx")
t <- mutate(output, d=as.numeric(prob_selected_team_win_d>0.5))
ranks <- report(t, "d") %>% select(team, games, pred_win_rate) %>% left_join(conf, by="team")
details <- mutate(t, road_team_predicted_win=ifelse(selected_team==road_team_name, d, 1-d),
home_team_predicted_win=1-road_team_predicted_win,
predicted_winner=ifelse(road_team_predicted_win==1, road_team_name, home_team_name),
actual_winner=ifelse(is.na(selected_team_win), "NA", ifelse(selected_team_win==1, selected_team, opposing_team))) %>%
select(home_team_name, road_team_name, road_team_predicted_win, home_team_predicted_win, predicted_winner, actual_winner)
write.csv(ranks, paste0("/Users/kimlarsen/Documents/Code/NBA_RANKINGS/rankings/rankings_",Sys.Date(), ".csv"))
write.csv(details, paste0("/Users/kimlarsen/Documents/Code/NBA_RANKINGS/rankings/game_level_predictions_",Sys.Date(), ".csv"))
write.csv(clusters_and_players, paste0("/Users/kimlarsen/Documents/Code/NBA_RANKINGS/modeldetails/cluster_details_",Sys.Date(), ".csv"))
write.csv(models, paste0("/Users/kimlarsen/Documents/Code/NBA_RANKINGS/modeldetails/coefficients_", Sys.Date(), ".csv"))
write.csv(parts, paste0("/Users/kimlarsen/Documents/Code/NBA_RANKINGS/modeldetails/score_decomp_", Sys.Date(), ".csv"))
View(models)
View(ranks)
View(conf)
conf <- read_excel("/Users/kimlarsen/Documents/Code/NBA_RANKINGS/rawdata/Conferences.xlsx")
t <- mutate(output, d=as.numeric(prob_selected_team_win_d>0.5))
ranks <- report(t, "d") %>% select(team, games, pred_win_rate) %>% left_join(conf, by="team")
details <- mutate(t, road_team_predicted_win=ifelse(selected_team==road_team_name, d, 1-d),
home_team_predicted_win=1-road_team_predicted_win,
predicted_winner=ifelse(road_team_predicted_win==1, road_team_name, home_team_name),
actual_winner=ifelse(is.na(selected_team_win), "NA", ifelse(selected_team_win==1, selected_team, opposing_team))) %>%
select(home_team_name, road_team_name, road_team_predicted_win, home_team_predicted_win, predicted_winner, actual_winner)
write.csv(ranks, paste0("/Users/kimlarsen/Documents/Code/NBA_RANKINGS/rankings/rankings_",Sys.Date(), ".csv"))
write.csv(details, paste0("/Users/kimlarsen/Documents/Code/NBA_RANKINGS/rankings/game_level_predictions_",Sys.Date(), ".csv"))
write.csv(clusters_and_players, paste0("/Users/kimlarsen/Documents/Code/NBA_RANKINGS/modeldetails/cluster_details_",Sys.Date(), ".csv"))
write.csv(models, paste0("/Users/kimlarsen/Documents/Code/NBA_RANKINGS/modeldetails/coefficients_", Sys.Date(), ".csv"))
write.csv(parts, paste0("/Users/kimlarsen/Documents/Code/NBA_RANKINGS/modeldetails/score_decomp_", Sys.Date(), ".csv"))
View(ranks)
